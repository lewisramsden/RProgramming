[["index.html", "Introduction to R Programming - University of York Preface About This Course Schedule DataCamp", " Introduction to R Programming - University of York Dr. Lewis Ramsden Preface These lecture notes have been created as supplementary material for this course and are mostly built up from the R scripts seen in the workshops, as well as a few additional comments. At the end of each chapter, you will also find the exercise problems discussed in the workshop sessions; the solutions will be added as we progress through the course. These notes are a work in progress and as such, will be updated throughout the duration of the course, so please make sure to revisit them on a regular basis. If there is anything missing from these notes that you believe would be beneficial or if you notice any mistakes, please let me know so I can improve them as best I can. Remember, they are here for your benefit so it would be great to have your input too. About This Course This course is by no means exhaustive and is designed to introduce you to the basics of programming in R, improving your confidence with coding and signposting you to additional resources for you to further enhance your skills. The course is non-credit bearing and thus, there are no formal assessments for you to submit. However, at the end of each week/chapter there are a number of exercises for you to complete, which I strongly recommend you attempt. The best way to learn and improve you coding skills is by doing it yourself and learning how to overcome the obstacles/errors that you will inevitably encounter. Remember, do not be afraid to search the web for hints and ideas when programming, it is usually the most effective way to solve your problems, I have to do it on a daily basis! Schedule As this is a non-credit bearing course, the syllabus and schedule are flexible and can be delivered as we see fit. However, a rough schedule over the 5-week course is as follows: RStudio and R basics (Revision) Conditional statements and IF statements FOR/WHILE loops Functions Creating, importing and analysing data DataCamp In order to assist you in your journey to learning all about R and RStudio, this course is supplemented via an online interactive tutorial website known as DataCamp. In DataCamp, you will have access to hundreds of interactive courses for R (and other languages such as Python and SQL), each tailored to a different aspect of the fundamentals of R programming or an area of application. In general, only a few of these courses are free to use, with the remaining requiring a paid subscription for access. However, for those of you sitting the short course on ‘R programming’ you will have free access to the full library of courses for 6 months from the start of the course. Registration for this free access will be discussed in the lecture itself and is only available to those invited by the lecturer via an email link. To learn more about DataCamp and what it has to offer visit . As mentioned above, DataCamp will be used as a supplementary resource for this course and we strongly encourage you to use it. At the end of each chapter of these lecture notes, we will include links directing you to appropriate courses within DataCamp that we believe complement the material given. "],["rstudio-and-r-basics-revision.html", "Week1 RStudio and R Basics (Revision) 1.1 How to install R and RStudio 1.2 RStudio interface explained 1.3 Mathematical calculations 1.4 R script 1.5 Assigning variables 1.6 Vectors and matrices 1.7 Plotting graphs 1.8 Applied exercises 1.9 DataCamp course(s)", " Week1 RStudio and R Basics (Revision) R is a language and programming environment for statistical computing and graphics (graphs and plots), which offers an ‘Open Source’ (freely available) alternative for implementation of the S language, which is the usual language of choice when it comes to statistical computing. In other words, R is a freely available software environment which runs on Windows, MacOS and LINUX, that allows the user to conduct mathematical calculations, data manipulation, statistical computations and create graphical output. RStudio is known as an integrated development environment (IDE) for R, which essentially provides much more user friendly access to R and its features. The figures below show the two environments separately. The first is the original R environment and the second is RStudio. Even from these simple graphics, you can see that RStudio provides a much more detailed user face, with a number of different ‘panels’ (discussed in more details later) for a range of different commands. Figure 1.1: R Environment. Figure 1.2: RStudio IDE. 1.1 How to install R and RStudio Installing R and RStudio has to be done in two separate steps: Firstly, we need to install the original R software for your specific operating system (Windows, Mac or LINUX) from https://cran.ma.imperial.ac.uk/. Once this is installed, you are able to open R and you should be met with a screen similar to the left hand side in Figure:1.1, above. At this point, you are now able to use R and all its features completely. However, as mentioned in the previous section, it is usually preferable to work with RStudio due to its user friendly interface. To download the free version of RStudio, visit [https://rstudio.com/products/rstudio/download/] and download ‘RStudio Desktop (Free)’. Once downloaded, you will be able to open RStudio and should see a similar screen to that of Figure:1.2. Keep in mind that the image(s) above may be running older versions than the one you are using. Once you have downloaded RStudio, I recommend you only ever use R through this platform, so there is no need to open the original R software. Note that in order to use R through the RStudio environment, you must first download the original R software. However, you can use R without downloading RStudio but I do not recommend this! If you are using a university computer, you do not have to worry about the steps above as R and RStudio are already installed and can be found within the list of installed in programmes. 1.2 RStudio interface explained When you open RStudio, you will notice that the environment has a number of different ‘panels’. You may find that your environment looks slightly different to the one in the figure above and may only have one larger panel on the left hand side rather than two separate ones. This difference will be explained later. To avoid confusion, your screen should look like the figure given below. Figure 1.3: Orginal RStudio View. Let us discuss each of the panels and some of their associated tabs, in a little more detail: Console (Left panel) - The console is the panel you will interact with the most, as this is where you can type commands which can be ‘Run’ to produce some output. Environment (Top panel, Tab 1) - The environment tab lists all active objects that have been ‘assigned’ (see below) and stored for later use. This is especially helpful when writing a long programme for which many variables need to be stored, as it allows you to refer back to previously defined objects. History (Top right panel, Tab 2) - The history tab shows a list of all commands that have been run within the console so far. Again, this can prove useful when writing long programmes which may require re-use of certain commands or to double check what has already been run. Files (Bottom right panel, Tab 1) - The file tab shows the folder of your ‘Working Directory’. That is, the folder in which R is directed to look for data sets etc. This tab looks similar to the equivalent folder in your PC/Mac folder window. Plots (Bottom right panel, Tab 2) - The plots tabs allows you to view all of the graphs/plots you have created within that session. This proves helpful when you want to compare a number of plots. Packages (Bottom right panel, Tab 3) - The packages tab provides access to a list of ‘Packages’ or ‘Add-ons’ needed to run certain functions. When RStudio is first started up, it will only have access to its basic packages which contain fundamental functions and tools. In order to conduct more sophisticated analysis or calculations it is usually required for you to install an extra package which contains these tools. Help (Bottom right panel, Tab 4) - The help tab can be used to find additional information about certain functions, tools or commands within RStudio. You will find this to be a very important part of your programming experience and will be used constantly. We will discuss later on how to access help via a shortcut through the console. 1.3 Mathematical calculations Now that we understand a little more about the setup of R and RStudio, we want to discuss what we can actually do in R. As previously mentioned, R is most notably used to conduct mathematical calculations, data manipulation, statistical computations and create graphical output but let us discuss each of these in a little more detail and give some practical examples you can try for yourself. In its most basic form, R can be used as a large scale calculator. In contrast to an actual calculator, it can perform a variety of calculations quickly and easily, which would otherwise take a great deal of time, e.g. series summations and matrix multiplcation. In fact, there are many calculations that can be performed in R which would not be possible even with a scientific calculator. 1.3.1 Basic numerical calculations If you simply type 5*3 into the ‘console’ (see above) and press enter you should receive the solution as an output which again appears in the console below your input: Figure 1.4: Basic Multiplication. In a similar way, you can perform a variety of other basic mathematical calculations: 7+3 ## [1] 10 9/3 ## [1] 3 15-2 ## [1] 13 6^3 ## [1] 216 sqrt(100) ## [1] 10 Notice that some calculations, like the square root above, require knowledge of certain ‘functions’ e.g. sqrt() of which there exists hundreds in R’s base packages for you to use. Knowing what each of them are and how they work is part of the programming experience and will take time. We will talk more about ‘functions’, and how you can create your own in a later chapter. Some other useful examples of pre-defined variables and functions are pi, exp() and log() which allow use of \\(\\pi\\), \\(e^x\\), \\(\\ln(x)\\) in calculations, respectively. For example, if we wanted to calculate \\(e^{\\ln(\\pi)}\\): exp(log(pi)) ## [1] 3.141593 1.3.2 More complicated calculations Imagine that you want to find the sum of all the integers from \\(1\\) to \\(1000\\). To do this on a basic calculator would require you to physically type each integer in turn, adding them as you go along (assuming you do not know the series summation formula). However, in R, you can compute this with one simple function, i.e. sum() with argument 1:1000, which creates the sequence of numbers from \\(1\\) to \\(1000\\). To see this in action before performing this particular calculation, type 1:10 in the console and press enter: 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 As you can see, the output is the required sequence of integers from \\(1\\) to \\(10\\). Returning to our original summation calculation, by inputting sum(1:1000) and pressing enter, R will first create the sequence from \\(1\\) to \\(1000\\) in a similar to above, then sum all of these values: sum(1:1000) ## [1] 500500 Before we move on to discuss more advanced calculations that can be handled with R, let us take a moment to highlight the disadvantages of writing code directly in the console itself and introduce something known as an ‘R script’. In addition, we will also discuss how we can ‘assign’ values to variables which we can then recall at any point for use in calculation. 1.4 R script So far, we have executed each line of code directly into the console itself, one line at a time, pressing enter and producing output each time. Although this works and produces the necessary output, it has numerous disadvantages. Firstly, if you make a mistake in the line of code, you cannot simply amend it and re-run it. Instead, you have to ‘re-type’ the code again on a new line without the mistake. Secondly, it requires you to execute every line of code once you have completed it. If you are writing a programme with hundreds of lines, this will become very frustrating especially if something goes wrong half way through and you have to re-write the entire code again. Finally, you cannot easily save your written code within the console to be re-opened and continued at a later date. In order to avoid all of these problems, from now on we type all of our code into an ‘R script’, from which we can execute the code into the console. To open an R script, click the icon which looks like a blank piece of paper with the small green plus sign in the top right hand corner of your screen, then click R Script: Figure 1.5: Opening an R script. At this point, a new (blank) panel should open in the top left of your screen. This panel will now become the panel which you type all of your code (you no longer type into the console panel). Once you have typed your line of code, you can execute it (run it into the console) by simply highlighting the relevant code then clicking on the Run button as seen in Figure:@ref{fig:Script2} below. Figure 1.6: Executing code from a script in R. Note you can also simply go to the start or end of the line and press Run, you do not actually need to highlight it. This is only necessary if you want to Run more than one line at a time. By executing code from the script, you avoid all the previously discussed problems. That is, if you have a made a mistake in your code, which you will notice once executed, you now simply amend this in the script and re-run it which is much simpler than re-writing the entire code. Moreover, you do not actually have to execute any code until you desire. Think of the script as a notebook which you can keep typing in and can run code from whenever you wish. Finally, and most importantly, you can save the script file and re-open this at a later date to continue working on and/or send to a colleague. You do this in the normal way as if saving a standard document in Word or other software. 1.5 Assigning variables Recall the earlier example where we calculated the sum of values from \\(1\\) to \\(1000\\). Although relatively straight forward, typing this code out each time we would like to use the result becomes tedious and is, in fact, unnecessary in R. Instead, R allows us to ‘assign’ a value, vector, matrix, function etc., to a variable so we can recall that particular quantity at any point by simply typing the variable itself. For example, instead of repeatedly typing sum(1:1000) or the result itself {r} sum(1:1000), we could ‘assigned’ this to the variable \\(x\\) using the ‘assignment operator’ &lt;-, which allowed us to reuse the value later on by simply typing \\(x\\): x &lt;- sum(1:1000) x ## [1] 500500 Note, however, that when we used the assignment operator it did not print the output itself, which would have happened if we had simply ran the code without assignment. This is the reason we then typed the variable \\(x\\) in the next line of the console, as this will now print as output whatever quantity is saved to the variable \\(x\\), in this case the sum of values from \\(1\\) to \\(1000\\). If you would actualy like to do both things at the same time, i.e, assign and print the output, you should put the assignment code in brackets: (x &lt;- sum(1:1000)) ## [1] 500500 x ## [1] 500500 Finally, when a variable is assigned, the variable name and the type of quantity that has been assigned to it, will be stored in the ‘environment’ tab/panel. In this case, the variable \\(x\\) was assigned and the quantity assigned to them takes the form of a ‘numeric’ (num) value. 1.6 Vectors and matrices As we have already briefly seen within the summation calculations above, R can also easily create collections of values in a single object, known as a vector, which can then be used in a variety of calculations, including vector and/or matrix type calculations themselves. 1.6.1 Vectors There are in fact a number of different ways to create ‘vectors’ of values in R, so let us discuss some of the most common. The most general way is to use the ‘combine’ or ‘concatenate’ function c(). This function combines a series of individual values and then glues them together to form a vector c(1, 2, 5, 9, 15) ## [1] 1 2 5 9 15 c(-3, 3, -1, 0, 10, 5, 2, -100, 25) ## [1] -3 3 -1 0 10 5 2 -100 25 Although this is the most general method, it does require you to type out each value individually, not ideal if you want a vector containing \\(1000+\\) values. We have already seen another example of how to create a vector using the semi-colon syntax 1:1000. However, this is quite specific and only works for creating vectors which form a series of increasing/decreasing values: 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 20:5 ## [1] 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 The more general version of this method is to create a ‘sequence’ of values with an initial starting point, an end value and specifying the increments between the values: seq(from=5, to=50, by = 5) ## [1] 5 10 15 20 25 30 35 40 45 50 The third way requires a little more thought and experience but will become second nature once you get going. It relies on you understanding how R deals with vectors in calculations, which you can then take advantage of (see below). 1.6.2 Vector calculations Using vectors in calculations is just as simple as with scalar values, but will not necessarily produce the output you might first expect in some cases. Let us start by looking at some simply addition and subtraction of vectors which we assign as different variables: a &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) b &lt;- 11:20 a+b ## [1] 12 14 16 18 20 22 24 26 28 30 b-a ## [1] 10 10 10 10 10 10 10 10 10 10 Notice that the calculations in the above have been done ‘element-wise’. This is a very important observation as it is a characteristic of R vector calculations that will come in handy throughout your coding life and should be utilised as much as possible. Let us look at a few more examples: a*b ## [1] 11 24 39 56 75 96 119 144 171 200 b/a ## [1] 11.000000 6.000000 4.333333 3.500000 3.000000 2.666667 2.428571 ## [8] 2.250000 2.111111 2.000000 a^2 ## [1] 1 4 9 16 25 36 49 64 81 100 a^b ## [1] 1.000000e+00 4.096000e+03 1.594323e+06 2.684355e+08 3.051758e+10 ## [6] 2.821110e+12 2.326305e+14 1.801440e+16 1.350852e+18 1.000000e+20 Once again, these have all been calculated element-wise! What happens if the vectors are not of the same length? In this case, R will automatically loop around the shorter vector and start using the values again from the start until it has used enough to match the length of the second vector. Let us take a look at a quick example to see how this works in practice: vec1 &lt;- c(1,2,3,4) vec2 &lt;- c(1,2,3,4,5,6,7) length(vec1) ## [1] 4 length(vec2) ## [1] 7 vec1 + vec2 ## Warning in vec1 + vec2: longer object length is not a multiple of shorter object ## length ## [1] 2 4 6 8 6 8 10 This is a perfect example of why you need to be very careful when writing code. Just because you have (possibly) made a mistake, R will not always realise you have and execute a calculation anyway. 1.6.3 Vector strings R is not all about numerical values. As it is a tool for statistical analysis, data can come in many shapes and sizes including words (known in R as character strings) or logical values, i.e, TRUE or FALSE. We will talk more about the latter values in the next few weeks but it is worth discussing ‘string’ here. A ‘character string’ is simply a word or combination of letters that you would like R to understand as such. To create or include a string, you need to use quotation marks: &quot;Hello World&quot; ## [1] &quot;Hello World&quot; Once you put quotation marks around something, R automatically recognises this as a string and will not try to perform and type of operation to this. This is even possible with numerical values: &quot;10 is a numerical value&quot; ## [1] &quot;10 is a numerical value&quot; As a small example, try adding together the strings “10” and “11” in R. Notice that because we have defined the values as strings, R cannot perform addition with them: str(&quot;10&quot;) ## chr &quot;10&quot; str(10) ## num 10 In exactly the same way as we have seen above, it is possible to create vectors of strings. This is very helpful when you want to name a bunch of objects, rows/columns in data tables or when they represent data points themselves, e.g., geographical regions etc. c(&quot;York&quot;, &quot;London&quot;, &quot;Liverpool&quot;, &quot;Birmingham&quot;) ## [1] &quot;York&quot; &quot;London&quot; &quot;Liverpool&quot; &quot;Birmingham&quot; 1.6.4 Vector extraction One final tool of note for vectors is the method of extracting certain values. For example, let us again consider the vector of values from \\(1\\) to \\(1000\\). Now assume that you want to ‘extract’ the first 10 values from this vector, i.e. the values \\(1\\) to \\(10\\). To extract values from a vector, you can use square brackets [] immediately after the brackets to inform R of which elements you want to extract: x &lt;- 1:1000 x[1:10] # Note that this extracts the first 10 elements, not the elements with value 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 y &lt;- seq(from = 10, to = 20, by = 0.5) y[1:10] ## [1] 10.0 10.5 11.0 11.5 12.0 12.5 13.0 13.5 14.0 14.5 z &lt;- y[c(1,3,5,7,9)] # This extracts the 1st, 3rd, 5th, 7th and 9th elements z ## [1] 10 11 12 13 14 y[-(1:10)] # The negative sign means extract everything except the specified elements ## [1] 15.0 15.5 16.0 16.5 17.0 17.5 18.0 18.5 19.0 19.5 20.0 Notice the comments in the above code? This can be done using the hashtag symbol and is a habit I would strongly recommend you start to implement from the off. I have given more information about this in the supplementary chapter (Additional Tips) at the end of these notes. To give you a little more context to how/where this might be helpful, take a look at the following simple example about with respect to heights of individuals in a given classroom: Example 1.1 Assume that the height (in cm) of a 80 individuals in a given classroom were measured and recorded in the variable height_data given below: height_data ## [1] 155.5811 162.0333 168.9776 163.6076 172.7571 180.7491 170.2831 161.2642 ## [9] 161.8752 187.9392 148.7173 152.8617 182.0168 171.4847 209.7244 181.5340 ## [17] 156.3352 162.7277 180.8836 204.8227 179.5608 180.2525 195.4984 154.2021 ## [25] 166.0309 206.2509 208.2360 163.7382 181.6033 186.9539 164.7755 161.2731 ## [33] 165.1258 188.2063 170.5172 175.2336 176.5116 161.0646 185.4073 173.8013 ## [41] 170.5533 168.1974 199.7604 150.8012 200.6002 158.4969 162.2994 176.7569 ## [49] 174.5441 192.6645 141.5822 162.5169 157.3972 146.4777 159.1934 170.6703 ## [57] 183.2897 157.2363 177.2096 167.2124 176.7870 157.4096 178.6680 186.3012 ## [65] 165.8819 166.9002 157.1681 159.1650 172.1028 168.0411 187.8667 168.8181 ## [73] 161.7007 153.6000 174.1937 171.3589 191.7009 151.1041 159.8565 192.5666 Now assume that we wanted to find out the average height of the 20 smallest individuals in the classroom: (height_sorted &lt;- sort(height_data)) ## [1] 141.5822 146.4777 148.7173 150.8012 151.1041 152.8617 153.6000 154.2021 ## [9] 155.5811 156.3352 157.1681 157.2363 157.3972 157.4096 158.4969 159.1650 ## [17] 159.1934 159.8565 161.0646 161.2642 161.2731 161.7007 161.8752 162.0333 ## [25] 162.2994 162.5169 162.7277 163.6076 163.7382 164.7755 165.1258 165.8819 ## [33] 166.0309 166.9002 167.2124 168.0411 168.1974 168.8181 168.9776 170.2831 ## [41] 170.5172 170.5533 170.6703 171.3589 171.4847 172.1028 172.7571 173.8013 ## [49] 174.1937 174.5441 175.2336 176.5116 176.7569 176.7870 177.2096 178.6680 ## [57] 179.5608 180.2525 180.7491 180.8836 181.5340 181.6033 182.0168 183.2897 ## [65] 185.4073 186.3012 186.9539 187.8667 187.9392 188.2063 191.7009 192.5666 ## [73] 192.6645 195.4984 199.7604 200.6002 204.8227 206.2509 208.2360 209.7244 smallest.20 &lt;- height_sorted[1:20] mean(smallest.20) ## [1] 154.9757 1.6.5 Exercises In R, create two vectors containing the numbers (5, 6, 7, 8) and (2, 3, 4). Assign these vectors to the variables u and v respectively. Without using R, write down or think about what you expect the following results to produce: add u and v subtract v from u multiply u by v divide u by v raise u to the power of v Using R, check if your initial thoughts were correct. Create the vector of values \\((1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5)\\) using the following two methods: Using the seq() function Using only the semi-colon syntax and element-wise calculations. Use R to create a vector containing all the square numbers from 1 up to and including 10,000 (\\(100^2\\)). The vectors LETTERS and letters are already pre-built into R’s base-package and contain the capital and lower-case versions of the letters from the English alphabet (Try it by simply running either LETTERS or letters in the console). Create a vector containing the first 10 letters of the English alphabet in Capitals. Now, using your solution from the previous part, create a new vector of the form: \\[\\begin{equation*} (A, A, A, B, B, B, C, C, C, \\ldots, J, J, J). \\end{equation*}\\] [Hint: Try looking into the rep() function and how it works] 1.6.6 Matrices In the previous section, we discussed how to create vectors of values. However, R can just as easily deal with matrices and matrix calculations; a life-saver compared to doing them by hand as you may have had to do so far in other modules. As with vectors, there are actually a number of different ways to create matrices in R, but let us begin by looking at the matrix() function and using the ‘Help’ command, via the question mark symbol, i.e., ?matrix() (alternatively via the help tab) for more information. Doing so shows that the general form of the matrix() function is given by matrix(data = , nrow = , ncol = , byrow = , dimnames = ) where each of the arguments are defined as follows: data - This is a vector of data that is used to create the elements of the matrix itself nrow - This specifies the number of rows desired for the matrix ncol - This specifies the number of columns desired for the matrix. byrow - This argument instructs R on how to fill the matrix using the data vector. If it takes the value of TRUE, then the elements will be filled row-wise, i.e. will first fill all the first row, then move down to second row etc, and if FALSE, the vice-versa. dimnames - This argument allows you to assign names to the rows and columns of the matrix. Note that if either nrow or ncol is not given, then R will try to guess the required value(s) and will fill any unspecified elements by repeating the original data vector until filled. Example 1.2 Consider the following two matrices \\[\\begin{equation*} A = \\left( \\begin{array}{cc} 3 &amp; 4 \\\\ 6 &amp; 2 \\end{array} \\right) \\quad \\text{and} \\quad B = \\left( \\begin{array}{cc} 1 &amp; 5 \\\\ 4 &amp; 6 \\end{array} \\right). \\end{equation*}\\] These can created in R using the matrix() function as follows: (A &lt;- matrix(c(3,6,4,2), nrow = 2, ncol = 2, byrow = TRUE)) ## [,1] [,2] ## [1,] 3 6 ## [2,] 4 2 (B &lt;- matrix(c(1,4,5,6), nrow = 2, ncol = 2, byrow = TRUE)) ## [,1] [,2] ## [1,] 1 4 ## [2,] 5 6 1.6.7 Matrix calculations Now that you have your matrices created and assigned as variables \\(A\\) and \\(B\\), you can use them in calculations: A+B ## [,1] [,2] ## [1,] 4 10 ## [2,] 9 8 B-A ## [,1] [,2] ## [1,] -2 -2 ## [2,] 1 4 A*B ## [,1] [,2] ## [1,] 3 24 ## [2,] 20 12 A/B ## [,1] [,2] ## [1,] 3.0 1.5000000 ## [2,] 0.8 0.3333333 ** BE CAREFUL!** Notice that all the calculations have been done element-wise again. As with the vectors, this turns out to be a very helpful tool within R although it might not appear so just now. If you want to apply ‘matrix-multiplication’ you have to use a slightly different command: A%*%B ## [,1] [,2] ## [1,] 33 48 ## [2,] 14 28 1.6.8 Matrix operations There are, of course, an array of other calculations you may apply when working with matrices e.g, determinant, inverse, transpose etc. Rather than showing each of these in turn, in this section we simply provide a table of the different matrix/vector operations that can be used in R, with a brief description of what each of them are used for. We suggest that you try these out for yourself in order to familiarise yourself and understand how they work and don’t forget to use the ‘Help’ function if you’re unsure. Once you have mastered these operations, have a go at the exercises in the next section. In the following table, A and B denote matrices, whilst x and b denote vectors: Operation Description A + B Element-wise sum A - B Element-wise subtraction A * B Element-wise multiplication A %*% B Matrix multiplication t(A) Transpose diag(x) Creates diagonal matrix with elements of x on the main diagonal diag(A) Returns a vector containing the elements of the main diagonal of A diag(k) If k is a scalar, this creates a \\((k x k)\\) identity matrix solve(A) Inverse of A where A is a square matrix solve(A, b) Solves for vector x in the equation \\(A\\vec{x}\\vec{b}\\) (i.e. \\(\\vec{x} = A^{-1}\\vec{b}\\)) cbind(A,B,...) Combines matrices(vectors) horizontally and returns a matrix rbind(A,B,...) Combines matrices(vectors) vertically and returns a matrix rowMeans(A) Returns vector of individual row means rowSums(A) Returns vector of individual row sums colMeans(A) Returns vector of individual column means colSums(A) Returns vector of individual column sums ** Recall that vectors are just particular cases of matrices with either one row or one column. Therefore, it is no surprise that you can create a vector using the matrix function. To do this, simply set the nrow or ncol argument equal to 1, depending on format of vector you want (row or column vector).** The only slight restriction to simply using the c() function, is that R will always saves the vector as a column vector. We point out here that this might not be so clear when you first define the vector in R, as the output given in the console looks like the form of a row vector. To overcome this, you can simply turn the column vector (default when using combine function in R) into a row vector by performing the transpose (see table above) of the original vector. 1.6.9 Matrix extraction In a similar way to how you we can extract values from vectors, we can extract values from matrices, this is also done with the square brackets [], however it now takes two different arguments, one for the specified row(s) and the other for the column(s) which you would like to extract. A ## [,1] [,2] ## [1,] 3 6 ## [2,] 4 2 A[1,1] ## [1] 3 A[2,1] ## [1] 4 A[c(1,2), 1] ## [1] 3 4 A[,1] # The blank space mean every row ## [1] 3 4 1.6.10 Exercises Using R, create the following matrices and vectors \\[ A=\\left[ \\begin{array}{ccc} 1 &amp; 4 &amp; 7 \\\\ 2 &amp; 5 &amp; 8 \\\\ 3 &amp; 6 &amp; 8 \\end{array}\\right] \\qquad B=\\left[ \\begin{array}{ccc} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 8 \\end{array}\\right] \\qquad D=\\left[ \\begin{array}{cc} 1 &amp; 3 \\\\ 4 &amp; 6 \\\\ 7 &amp; 9 \\end{array}\\right] \\qquad \\vec{b}=\\left[ \\begin{array}{c} 3 \\\\ 6 \\\\ 9 \\end{array}\\right] \\] Using the objects defined above, perform the following operations and check if the result is what you would expect: \\(A + B\\) element-wise sum \\(A \\times B\\) element-wise multiplication \\(A \\times B\\) matrix multiplication \\(B \\times D\\) matrix multiplication \\(B \\times \\vec{b}\\) matrix multiplication Compute the transpose of matrix A and of matrix D. Create a matrix with the elements 1, 2, 3, 4 in the main diagonal and zeros in the off diagonal elements. Define a vector which consists of elements from the main diagonal of matrix B. Build an identity matrix with dimension 10. Compute the inverse of matrix A. Check if \\(A \\times A^{-1}=I_3\\). Find the solution \\(\\vec{x} = (x_1, x_2, x_3)^\\top\\), where \\[ \\left\\{ \\begin{array}{ccl} 6.5 &amp;=&amp; x_1 + x_2 + x_3 \\\\ 9 &amp;=&amp; 0.5 x_1 + 2 x_2 + x_3\\\\ 11 &amp;=&amp; 3 x_1 + x_2 + 2 x_3 \\end{array}\\right. \\] Combine the matrices A and D, horizontally. Combine the matrix A and the transpose of vector b vertically. Compute the mean for each row of matrix A. Do the same for each column of matrix A. Compute the sum for each row of matrix B. Do the same for each column of matrix B. 1.7 Plotting graphs One of R’s major strengths is the ease with which well-designed, publication-quality plots can be produced and can include mathematical symbols and formulae where needed. The basic plotting function in R, located in its basic packages, is the so-called plot() function. In its simplest form, the plot() function allows you to plot two variables, say \\(X\\) and \\(Y\\), against each other as a scatter plot. For example, imagine we wanted to plot the following points \\((x,y)\\): \\[\\begin{equation*} (0,0), \\,(1,2),\\, (2,2),\\, (3, 5),\\, (4, 4),\\, (6, 8), \\end{equation*}\\] as a scatter plot. Then, we could do this as follows: X &lt;- c(0,1,2,3,4,6) Y &lt;- c(0,2,2,5,4,8) plot(X, Y) From the R plot above, you can see that R has simply taken the two vectors (X and Y) and plotted the values pairwise (as required) to create a basic scatter plot. That being said, the plot itself looks very basic and is not particularly aesthetic. This is because we have used the very basic structure for the plot() function. However, with a little alteration, this can be adapted to create something a little more exciting: Figure 1.7: Example of Plot using plot(). The example above provides a small insight into the very basics of the plotting tools available in R. Let us know look at this function a little more closely. Using ?plot() we find that the plot() function has the general form: plot(x, y, main = , xlab = , ylab= , type= , pch= , col= , cex= , bty = ) where each of the arguments are defined as follows: x - Points to be plotted along the x-axis y - Corresponding points to plotted against the y-axis. Note that these values match-up element-wise the x values to create co-ordinate pairs \\((x,y)\\) main - Takes a character string and gives the plot a main title xlab - Takes a character string and labels the x-axis ylab - Takes a character string and labels the y-axis type - Takes a number of different character strings to define the type of plot desired, i.e. line, point etc. (see table below) pch` - Takes a values and defines the shape each point should take, i.e. circle, square etc. (see table below) col - Sets the colours of the points/lines in the plot cex - Takes a value and defines the size of the points bty - Takes a character string and sets the type of axes for the plot A number of other arguments can be used to change the layout and format of the plot but will not be discussed here. If you are interested, search for the par() function in the ‘Help’ tab. Example 1.3 Consider the followings prices on the equity index S&amp;P500 for the last weeks: day &lt;- c(1:10) price &lt;- c(1979,1987,1951,1923,1920,1884,1881,1931,1932,1938) Using a combination of all the arguments in the above list, we can produce the following plots: plot(day, price) plot(day, price, main=&quot;S&amp;P 500&quot;, xlab=&quot;Day&quot;, ylab=&quot;Closing Price&quot;, pch=19, col=3, type=&quot;p&quot;) plot(day, price, main=&quot;S&amp;P 500&quot;, xlab=&quot;Day&quot;, ylab=&quot;Closing Price (£)&quot;, pch=&quot;+&quot;, col=2, type=&quot;b&quot;, bty=&quot;L&quot;) The table below gives a non-exhaustive list of some of the different options you can make when choosing arguments for your plots. To find more, search online: type Description “p” points “l” lines “b” both “c” lines part alone of “b” “h” histogram like vertical lines “s” stair steps pch Description 0 square 1 circle 2 triangle 4 plus 5 cross 6 diamond bty Description “o” full box “n” no axes “7” top and right axes “L” bottom and left axes “C” top, bottom and right axes “U” bottom, left and right axes 1.7.1 Adding to plots (lines, points etc.) There will be many occasions where you wish to add another set of points, or some other plot to your original. This is usually the case when comparing two different sets of data or, for example, when wanting to draw a regression line through your data points. Again, R has a variety of pre-defined functions that allow you to do this with ease. However, those who are new to R will make the common mistake of trying to add a second plot to the original by using the plot() function for a second time. The plot() function (seen above) does not simply plot points or lines. The source code underpinning the plot() function first instructs R to create a separate window/panel, create a set of axes (designed based on the choice of bty as argument) create some axis labels then, finally, add the points or lines. Therefore, by executing the function again, you will find you produce a completely new plot rather than adding to the previous. In order to add more graphics to the original plot, we instead have to use the functions points(), lines() and abline(). The points() and lines() functions work in a very similar to that of the plot() function in the sense that they take similar arguments. The only difference now, is that the function does not first create axes etc., but will simply plot the points/lines onto the most recent plot that was created. Note here that since the points() function can take type as an argument, it is actually possible to create line plots with this function (type = \"l\") instead of using the lines function. Remember, there are many ways to create the same output in R, it is down to you to decide which you prefer to use. Let’s add to the S&amp;P example above, by also adding the FTSE prices during the same time period: plot(day, price, main=&quot;S&amp;P 500&quot;, xlab=&quot;Day&quot;, ylab=&quot;Closing Price (£)&quot;, pch=&quot;+&quot;, col=2, type=&quot;b&quot;, bty=&quot;L&quot;) ftse &lt;- c(1960, 1960, 1950, 1931, 1918, 1890, 1900, 1910, 1905, 1935) points(day, ftse, col = &quot;blue&quot;, type=&quot;b&quot;, pch=&quot;+&quot;) The abline() function, on the other hand, is slightly different. This function is used simply to create straight lines on your current plot. Using ?abline() we see it takes the form abline(a, b, h= , v = , ... ) The arguments in this case are no longer data points like in the previous plotting functions but correspond to co-ordinates: a - The value of the intercept for the straight line b - The value for the gradient of the straight line h - The y co-ordinate (intercept) for a horizontal line v - The x co-ordinate for the vertical line. In addition to these arguments, you can also format the line type, width etc., but we will not discuss these again as they are simply aesthetic parameters which you can easily search for online. plot(1:10, (1:10)^2, main=&quot;Abline example&quot;, ylab=&quot;y&quot;, xlab=&quot;x&quot;, type=&quot;b&quot;, pch=19,) plot(1:10, (1:10)^2, main=&quot;Abline example&quot;, ylab=&quot;y&quot;, xlab=&quot;x&quot;, type=&quot;b&quot;, pch=19,) abline(a=0,b=3, col = &quot;red&quot;) abline(a=0, b=6, col = &quot;blue&quot;) abline(h=60, lty = 2) abline(v=6, lty = 3, lwd = 2, col = &quot;orange&quot;) In addition to the plot function and its variety of options, we can implement other plotting functions such as hist() and boxplot(), which will be discussed in a later chapter in more details, to produce the best graphical representation of your data possible. Finally, although we discuss graphics using the basic plotting commands here, it is worth pointing out the popularity of a completely different package and set of functions, known as ggplot2, which makes the plotting experience even more exciting. We will not actually discuss this in these lecture notes, however, it is strongly advised that you familiarise yourself with this package and its associated functions using DataCamp. In fact, there are three excellent courses devoted to the subject which will be linked at the end of these notes. 1.7.2 Exercises Consider the following formula to calculate the number of mortgage payment terms required to pay off a mortgage as a function of the principle amount (\\(P\\)), the monthly repayments (\\(M\\)) and the monthly interest (\\(i\\)): \\[\\begin{equation*} n = \\frac{\\ln\\left(\\frac{i}{\\frac{M}{P}-i}+1 \\right)}{\\ln(1+i)} \\end{equation*}\\] Using R, solve the following problems: Calculate the number of payments \\(n\\) for a mortgage with principle balance of £200,000, monthly interest rate of \\(0.5\\%\\) and monthly payments of £2000. Now construct a vector, named \\(n\\), of length 6 with the results of this calculation (in years) for a series of monthly payment amounts: \\((2000, 1800, 1600, 1200, 1000)\\). Does the last value of \\(n\\) surprise you? Can you explain it? Create a line plot for the values of \\(n\\) (excluding the last) against the different payment amounts. Give the plot a title, appropriate label names and make the points appear in blue. 1.8 Applied exercises The table below represents the daily log-returns from four different assets: Google, Apple, Sony and Samsung Google Apple Sony Samsung 0.007 0.004 0.019 0.015 0.017 0.005 -0.014 -0.019 -0.011 -0.005 0.019 -0.005 -0.003 0.011 -0.009 -0.008 0.024 0.004 -0.006 -0.016 0.025 0.001 0.004 -0.007 -0.004 -0.001 0.002 0.001 Create 4 separate vectors containing the daily log-returns for each asset. Calculate the corresponding (true) daily returns of each asset and save these as new vectors. Plot the daily returns of all 4 assets on the same plot. Add a title, axis labels and plot each asset in different colours. You may have to manually set the y axis limits. Try it without and see why. Create a vector string containing the 4 asset names: Google, Apple, Sony and Samsung. Create a matrix of the real daily returns, with each column corresponding to a different asset and include the asset names at the top of each column. Assume you have a portfolio consisting of 20% Google, 30% Apple, 40% Sony and 10% Samsung assets. Using matrices, calculate the daily returns of your portfolio. Add the portfolio returns to your previous plot. Make this a different colour and use a different line type. Comment on your findings. Finally, extract the first row of the matrix corresponding to the returns from day 1. Calculate the min and max returns on this day. 1.9 DataCamp course(s) https://www.datacamp.com/courses/free-introduction-to-r (R Basics - Recommended) https://app.datacamp.com/learn/courses/introduction-to-r-for-finance (Introduction to R for Finance) https://www.datacamp.com/courses/data-visualization-in-r (Plotting Data) https://www.datacamp.com/courses/data-visualization-with-ggplot2-1 (Plotting Data using ggplot) https://www.datacamp.com/courses/data-visualization-with-ggplot2-2 https://www.datacamp.com/courses/data-visualization-with-ggplot2-part-3 "],["conditionals-and-if-statements.html", "Week2 Conditionals and IF Statements 2.1 Relational operators 2.2 Logical operators 2.3 IF statements 2.4 Exercises 2.5 Applied exercises 2.6 DataCamp course(s)", " Week2 Conditionals and IF Statements In R, conditional statements or arguments are used to compare or analyse values/data based on certain conditions. In general, this is done with the use of ‘relational operators’ (=, &gt;, &lt;, &gt;=, &lt;=, !=) and ‘logical operators’ (OR, AND, AND/OR). 2.1 Relational operators The most basic of the ‘relational operators’ is the equality operator (==), which can be used to check if two objects (values, vectors, matrices etc.) are equal: 4 == 3+1 ## [1] TRUE 5^2 == 25 ## [1] TRUE 8 %% 5 == 3 # The double percentage sign here resembles modulo arithmetic, i.e. 8 mod 5 ## [1] TRUE This can also be performed on vectors on an element by element basis (as usual): 1:10 == c(1,2,3,4,5,6,7,8,9,10) ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE 1:10 == c(0,2,3,4,5,6,7,8,9,10) ## [1] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE Unsurprisingly, it also works on matrices on an element by element basis as well: matrix(5, nrow = 3, ncol = 3) ## [,1] [,2] [,3] ## [1,] 5 5 5 ## [2,] 5 5 5 ## [3,] 5 5 5 matrix(1:9, nrow = 3) == matrix(5, nrow = 3, ncol = 3) ## [,1] [,2] [,3] ## [1,] FALSE FALSE FALSE ## [2,] FALSE TRUE FALSE ## [3,] FALSE FALSE FALSE diag(5, nrow = 3, ncol = 3) ## [,1] [,2] [,3] ## [1,] 5 0 0 ## [2,] 0 5 0 ## [3,] 0 0 5 diag(5, nrow = 3, ncol = 3) == 5 * diag(1, nrow =3) ## [,1] [,2] [,3] ## [1,] TRUE TRUE TRUE ## [2,] TRUE TRUE TRUE ## [3,] TRUE TRUE TRUE Notice that this equality operator uses a double equal sign (==) rather than a single =. This is due to the fact the single equality sign is already used for assignments (similar to &lt;-). This can be confusing, can easily cause errors and is the main reason I always suggest using &lt;- for variable assignment. Conversely, you can use the not equal operator (!=) in a similar way 3 != 5 ## [1] TRUE seq(1, 10, by = 1) != 1:10 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE Note - In general, the (!) symbol negates any type of relational operator or Boolean value in R, e.g. !TRUE ## [1] FALSE !FALSE ## [1] TRUE In a similar way, you should easily be able to understand how the rest of the relational operators work, i.e. (&lt;, &gt;, &lt;=, &gt;=). In the following example(s), I will introduce you to one of the many pre-programmed data sets that form part of the base package data sets, i.e, mtcars; we will discuss data sets in more details in the next few weeks. mtcars mpg cyl disp hp drat wt qsec vs am gear carb Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 Exercise 2.1 Assume we want to analyse the hp (horsepower) variable (column) only. Based on what we discussed last week regarding vector/matrix extraction, how can we extract the hp data only? An alternative method of extraction for data sets (data frames) is to use the $ extraction command based on the column/variable name. Note that this only works on data frames and not general matrices, whereas the square bracket extraction works for both: (HP &lt;- mtcars$hp) ## [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 ## [20] 65 97 150 150 245 175 66 91 113 264 175 335 109 HP &gt; 200 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE ## [25] FALSE FALSE FALSE FALSE TRUE FALSE TRUE FALSE What do you think will happen if we execute the code sum(HP&gt;200) and mean(HP&gt;200)? Have a think about this then check out the solution when you’re ready. Solution sum(HP &gt; 200) ## [1] 7 mean(HP &gt; 200) ## [1] 0.21875 In both of these case, the conditional statement(s) have produced a vector of TRUE and FALSE Boolean values. In R, these are understood as being values of 1 and 0 respectively. Hence, it is then possible to take the sum() or the mean() over the Boolean values themselves. The above gives an examples of how R understands the Boolean values (TRUE/FALSE) as 1 and 0, respectively and also give you an idea of how powerful such simple lines of conditional code can be when used in the right way. Exercise 2.2 Can you create a vector of all square numbers from 1 to 100 and count how many of these values are divisible by 3? Moreover, can you determine what percentage of them are NOT divisible by 5? In the next few weeks, we will look in more details at how we can use these relational operators (along with the logical operators discussed below) to conditionally extract data/values from a data.frame. This is a very helpful skill to learn for data handling and manipulation. 2.2 Logical operators ‘Logical operators’ are used to check whether multiple conditions have been satisfied at the same time (AND) or at least one of them (OR). The key to understanding how these work in R, is understanding how logical operators work in theory. Let us begin with the logical operator ‘AND’ which, in R, is denoted via &amp; or &amp;&amp; (I will explain the difference later). For an AND statement/condition to evaluate to TRUE, both conditions in the statement must be TRUE. That is, the condition on the left is TRUE ‘AND’ the condition on the right is TRUE TRUE &amp; TRUE ## [1] TRUE TRUE &amp; FALSE ## [1] FALSE FALSE &amp; FALSE ## [1] FALSE pi ## [1] 3.141593 pi &gt; 3 ## [1] TRUE pi &lt; 4 ## [1] TRUE pi &gt; 3 &amp; pi &lt; 4 ## [1] TRUE 5 &lt; 10 &amp; 5 &lt; 3 ## [1] FALSE It is actually possible to have more than two arguments and include different relational operators as well.What do we think the following expression will evaluate to, TRUE or FALSE? pi &gt; 0 &amp; pi &lt; 5 &amp; !(pi %% 2 == 0) ## [1] TRUE As with relational operators, logical operators can also be used in vector form, where the &amp; operator evaluates on a term by term basis, e.g. c(1,2,3) &lt; c(2,3,4) &amp; c(2,3,4) &lt; c(3,4,5) # Think about this one a little! ## [1] TRUE TRUE TRUE In fact, this sort of logical/relational operation can also be computed on other objects than just numerical values, i.e. ‘character strings’: &quot;Red&quot; == &quot;Red&quot; ## [1] TRUE &quot;Red&quot; == &quot;Blue&quot; ## [1] FALSE &quot;Red&quot; == &quot;red&quot; ## [1] FALSE c(1, 2, 3) &lt; c(2, 3, 4) &amp; &quot;Red&quot; == &quot;Blue&quot; # How has this worked? The left hand side is a 3 element vector but the right is a single logical element? ## [1] FALSE FALSE FALSE c(1, 2, 3) &lt; c(2, 1, 4) &amp; &quot;Red&quot; == &quot;Red&quot; ## [1] TRUE FALSE TRUE In contrast to &amp; which evaluates on a term by term basis, the double &amp;&amp; reads from left to right and only evaluates the first values of each vector c(1, 2, 3) &lt; c(2, 1, 4) &amp;&amp; &quot;Red&quot; == &quot;Red&quot; ## Warning in c(1, 2, 3) &lt; c(2, 1, 4) &amp;&amp; &quot;Red&quot; == &quot;Red&quot;: &#39;length(x) = 3 &gt; 1&#39; in ## coercion to &#39;logical(1)&#39; ## [1] TRUE c(5, 2, 3) &lt; c(2, 1, 4) &amp;&amp; &quot;Red&quot; == &quot;Red&quot; ## Warning in c(5, 2, 3) &lt; c(2, 1, 4) &amp;&amp; &quot;Red&quot; == &quot;Red&quot;: &#39;length(x) = 3 &gt; 1&#39; in ## coercion to &#39;logical(1)&#39; ## [1] FALSE The second logical operator is the so called OR operator, denoted by | and ||, which evaluates to TRUE as long as ‘at least one statement is TRUE’, e.g. TRUE | TRUE ## [1] TRUE TRUE | FALSE ## [1] TRUE FALSE | TRUE ## [1] TRUE FALSE | FALSE ## [1] FALSE F | F | T | F #etc. ## [1] TRUE The same ideas as were discussed above for &amp; work also for |, i.e. | evaluates element-wise, whilst || only evaluates the first element of a vector. Exercise 2.3 With all this in mind, how can we calculate the number of cars in the mtcars data set that have horsepower greater than 200, mpg at most 30, are automatic but do not have 6 cylinders? Exercise 2.4 The set of data VADeaths contains the death rates (measured per 1000 population per year), in Virginia, USA, in 1940. The structure of this data set is a matrix (not a data frame) with the rows denoting age ranges and the columns sex/area. How can we find out this information (and possibly more) about the data set? Extract the two columns containing the female data, either together or separately. Using conditional arguments, determine how many age groups have a death rate larger than 20 for rural females and a death rate less than 30 from Urban females. 2.3 IF statements ‘IF’ Statements are extremely popular and powerful tools in programming that are used to execute certain commands, based on given conditions. In most cases, the conditions used within IF statements are built up from combinations of the relational and logical operators seen above. In general, an IF statement has the following form: if ( condition ){ command } else { command } To see how an IF statement works in practice, let us look at a simple example to check if a number is odd or even x &lt;- 8 if (x %% 2 == 0){ print(&quot;This number is even&quot;) } else { print(&quot;This number is odd&quot;) } ## [1] &quot;This number is even&quot; You can actually make the output even better in this example by asking it to print out the value of \\(x\\) that has been given by using the paste function paste(). Notice the variable \\(x\\) is not in quotation marks but the ‘words’ are. x &lt;- 14 if (x %% 2 == 0){ print(paste(x, &quot;is an even number&quot;)) } else { print(paste(x,&quot;is an odd number&quot;)) } ## [1] &quot;14 is an even number&quot; This is quite a simple example but it is very possible to have more complicated and longer IF statements that contain more conditional possibilities. If this is the case, you can simply extend the IF statement by adding elseif instead of just else. Finally, once you have finished with all conditions, you finish with else. For example x &lt;- 7 if (x &lt; 0) { print(paste(x, &quot;is a negative number&quot;)) } else if (x &gt; 0) { print(paste(x, &quot;is a positive number&quot;)) } else { print(paste(x, &quot;is Zero&quot;)) } ## [1] &quot;7 is a positive number&quot; Exercise 2.5 Can you create an IF statement which tells you whether a number (x) is divisible by another number (y), where both x and y can be changed (not fixed)? Hint: Use the modulus operator %%. Looking back at the previous two examples regarding even/odd and positive/negative numbers, we can actually combine these two statements by using logical operators within the IF conditions: x &lt;- 4 if (x &lt; 0 &amp; x %% 2== 0) { print(paste(x, &quot;is a negative even number&quot;)) } else if (x &lt; 0) { print(paste(x,&quot;is a negative odd number&quot;)) } else if (x &gt; 0 &amp; x %% 2 == 0) { print(paste(x, &quot;is a positive even number&quot;)) } else if (x &gt; 0){ print(paste(x, &quot;is a positive odd number&quot;)) } else { print(paste(x, &quot;is Zero&quot;)) } ## [1] &quot;4 is a positive even number&quot; In fact, you could do this an alternative way by ‘nesting’ IF statements inside one another to make several ‘layers’. There is no right or wrong way to do these but through experience you will see either can be used depending on the situation. x &lt;- 3 if (x &lt; 0) { if (x %% 2 == 0){ print(paste(x, &quot;is a negative even number&quot;)) } else { print(paste(x,&quot;is a negative odd number&quot;))} } else if (x &gt; 0) { if (x %% 2 == 0){ print(paste(x, &quot;is a positive even number&quot;)) } else { print(paste(x, &quot;is a positive odd number&quot;)) } } else { print(paste(x, &quot;is Zero&quot;)) } ## [1] &quot;3 is a positive odd number&quot; What happens if we let \\(x\\) be a vector? Note - The IF statement will technically work in the sense it will print something out, but it will not do quite what we expect. This is because in an IF statement, the conditions or ‘test statements’ can only be single elements and thus, R will only consider the first element of the vector. With this in mind, it is important to note that if you use a logical operator in an IF statement, it is always best to use the double version, i.e. &amp;&amp; or ||. That being said, it is possible to bypass such a problem using the ifelse() function. The ifelse() function allows us to create an IF statement which only has one condition but can be applied to a vector element-wise. x &lt;- c(1, 2, 3) ifelse(x %% 2 == 0, &quot;Even&quot;, &quot;Odd&quot;) ## [1] &quot;Odd&quot; &quot;Even&quot; &quot;Odd&quot; Note - This only works for quite simple statements. It is possible to use a more complicated IF statement on a vector as we tried above but to do so we have to introduce the idea of FOR loops, which we will discuss next week! 2.4 Exercises Create an R script that calculates the square root of a value, x. If the value contained in x is negative it should return NA as output. Create an R script that returns the maximum value out of the elements of a numeric vector of length 2 (two elements), without using the min, max or sort functions. Use the command x &lt;- rexp(20, rate = 0.5) to create a vector containing 20 simulations of an exponential random variable with mean 2. Return the number of values that are larger than the mean of the vector x. You are allowed to use the mean() function. 2.5 Applied exercises Before proceeding with this exercise, you need to first generate 1,000 random values which will represent your data in throughout the questions. To do this, use the code yearly.returns &lt;- rbeta(1000, 5, 2) - 0.7. The values you have generated represent 1000 yearly returns from an asset. Using this data: Plot a histogram of the yearly returns for this asset. Calculate the sample mean and sample standard deviation (s.d.) for the yearly returns. The Sharp Ratio is a measure of risk for a given asset calculated by comparing the mean returns to the risk-free rate of interest. That is, if we denote the mean return from an asset by \\(r_A\\), the standard deviation by \\(\\sigma_A\\) and the risk-free rate of interest is denoted \\(r_f\\), then the Sharpe ratio is given by \\[SR = \\frac{r_A-r_f}{\\sigma_A}.\\] Given that the risk-free rate of interest is \\(r_f=4\\%\\), calculate the Sharpe Ratio for this asset. Comment on your result. Calculate the proportion of positive (gains) and negative (losses) yearly returns, respectively. Calculate the proportion of yearly returns that are larger than 2 s.d. away from the mean. Calculate the mean yearly losses. HINT: You can extract elements from vectors/matrices using boolean values, e.g. if x is a 2 element vector, then x[c(TRUE, FALSE)] will extract the first element but not the second. Calculate the s.d. of the losses (downside risk) of the daily returns. Given your answer in part 2., comment on this result. The Sortino Ratio is another measure of risk for an asset but only takes into account the downside risk of an investment. That is, if we denote the downside risk (deviation) by \\(\\sigma_A^-\\), then the Sortino ratio is given by \\[SorR = \\frac{r_A-r_f}{\\sigma_A^-}.\\] Given that the risk-free rate of interest \\(r_f=4\\%\\), calculate the Sortino Ratio for this asset. Comment on the difference between this measure and the Sharpe Ratio. 2.6 DataCamp course(s) https://www.datacamp.com/courses/intermediate-r (Intermediate R Course) https://app.datacamp.com/learn/courses/intermediate-r-for-finance (Intermediate R for Finance Course) "],["loops.html", "Week3 Loops 3.1 For loops 3.2 While loops 3.3 Exercises 3.4 Applied Exercises 3.5 DataCamp course(s)", " Week3 Loops 3.1 For loops ‘For loops’, sometimes just known as ‘Loops’ are one of the most useful tools in programming and you will find, once you understand how to implement them, that they become your best friends. That being said, it is very common that people like them so much that they are used when they are not necessary, as we will see later. Simply put, a ‘for loop’ allows us to ‘loop’ through all the elements of a given object (usually a vector or matrix) and perform a command or operation for each element. When combined with ‘IF statements’, ‘for loops’ become very powerful and flexible and allow you to perform almost any task. Let us start by understanding how a basic ‘for loop’ is constructed, then we will consider some simple examples. The general form of a for loop is as follows: for (i in x) { command in terms of i } That is, i will take the first value of the object x, perform the command in the brackets with this given value of i, then i will loop to the second value of x and so on. For example: for (i in c(1,2,3,4,5)) { print(i^2) } ## [1] 1 ## [1] 4 ## [1] 9 ## [1] 16 ## [1] 25 This works perfectly but notice that we could also do this using what we called ‘vectorised calculation’, which takes advantage of how R deals with vectors on an element-by-element basis: (1:5)^2 ## [1] 1 4 9 16 25 As another example, consider the following: (x &lt;- seq(from = 10, to = 100, by = 5)) ## [1] 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 for (i in x){ print(i %% 2 == 0) } ## [1] TRUE ## [1] FALSE ## [1] TRUE ## [1] FALSE ## [1] TRUE ## [1] FALSE ## [1] TRUE ## [1] FALSE ## [1] TRUE ## [1] FALSE ## [1] TRUE ## [1] FALSE ## [1] TRUE ## [1] FALSE ## [1] TRUE ## [1] FALSE ## [1] TRUE ## [1] FALSE ## [1] TRUE Again, was this necessary or could we have used vectorised calculations again? If possible, you should always use the vectorised calculation version of a command as this saves times and processing power. That being said,there are many situations where ‘for loops’ are necessary, not just useful. Let us return to our mtcars data set seenin the previous chapter and consider a problem regarding plotting histograms of the data: hist(mtcars$hp) hist(mtcars[,4]) Now, imagine you wanted a histogram for every variable. Executing the code hist(mtcars) wouldn’t work as the input necessary for this function should be in the form of a single vector of values. However, to overcome this hurdle, we could make use of ‘for loops’: for (i in 1:ncol(mtcars)){ hist(mtcars[,i], main = paste(&quot;Histogram of&quot;, colnames(mtcars)[i])) } The above is great, but it would be nice to have them all on one screen together. Note that the code below is not really linked to for loops but is still worth mentioning here. par(mfrow = c(3,4)) # Changes the plot frame to fit 3 rows and 4 columns of separate plots. for(i in 1:ncol(mtcars)){ hist(mtcars[,i]) } This is much better but I would like the individual titles and axis labels to reflect the variable name: par(mfrow = c(3,4)) for(i in 1:ncol(mtcars)){ hist(mtcars[,i], main = paste(&quot;Histogram of&quot;, colnames(mtcars)[i]), xlab = paste(colnames(mtcars)[i])) } Even this very simply example starts to show you the value and versatility of for loops. Now, as mentioned above, it is also possible to combine ‘for loops’ with IF statements. For example, the code below counts the number of even numbers in a vector of values: x &lt;- c(2,5,3,9,8,11,6) count &lt;- 0 for (i in x) { if(i %% 2 == 0){ count &lt;- count+1 } } print(count) ## [1] 3 Exercise 3.1 Is there a quicker and easier way to achieve what has been done above without ‘for loops’? Exercise 3.2 Can you write a ‘for loop’ that prints out the names of the cars in the mtcars data set which have 8 cylinders? Note, the car names can be found using the rownames(mtcars) command. In fact, there is actually another way this can be done using conditional extraction which we will talk more about next week. Exercise 3.3 Remember our IF statement from last week that didn’t work correctly because we used a vector in the conditional statement? i.e. x &lt;- c(1, 2, 3) if (x &lt; 0) { if (x %% 2 == 0){ print(paste(x, &quot;is a negative even number&quot;)) } else { print(paste(x,&quot;is a negative odd number&quot;))} } else if (x &gt; 0) { if (x %% 2 == 0){ print(paste(x, &quot;is a positive even number&quot;)) } else { print(paste(x, &quot;is a positive odd number&quot;)) } } else { print(paste(x, &quot;is Zero&quot;)) } Can you now apply the idea of a ‘for loop’ to get this to work correctly? 3.1.1 Matrices So far, we have seen how we can Loop through a vector of values to perform certain tasks, but it is also possible to do this over a matrix of values. The only difference is that this requires two loops (one for each index - row and column). For example: (M &lt;- matrix(round(runif(9,min = 0, max = 100)), nrow = 3, ncol = 3)) # This creates a 3x3 matrix of rounded uniform random values. ## [,1] [,2] [,3] ## [1,] 44 86 46 ## [2,] 20 98 35 ## [3,] 56 34 26 for(i in 1:nrow(M)){ for(j in 1:ncol(M)){ print(paste(&quot;Element [&quot;, i,&quot;,&quot;,j,&quot;] of M is equal to&quot;,M[i,j])) } } ## [1] &quot;Element [ 1 , 1 ] of M is equal to 44&quot; ## [1] &quot;Element [ 1 , 2 ] of M is equal to 86&quot; ## [1] &quot;Element [ 1 , 3 ] of M is equal to 46&quot; ## [1] &quot;Element [ 2 , 1 ] of M is equal to 20&quot; ## [1] &quot;Element [ 2 , 2 ] of M is equal to 98&quot; ## [1] &quot;Element [ 2 , 3 ] of M is equal to 35&quot; ## [1] &quot;Element [ 3 , 1 ] of M is equal to 56&quot; ## [1] &quot;Element [ 3 , 2 ] of M is equal to 34&quot; ## [1] &quot;Element [ 3 , 3 ] of M is equal to 26&quot; Another very important technique that you will need when working with ‘for loops’ is how to store values in a new vector (matrix) as you finish each loop. This is something that you will use a lot when working through your R based assessments in your Actuarial modules, since you will be working with larger data sets and need to make calculations which then need to be saved for use later on. As a simple example let us see how we could use a ‘for loop’ to generate some random values and save them in a vector if they satisfy some condition. Before we start, let us note how you can add a value to an already existing vector (x &lt;- c(1, 3, 5, 7, 9)) ## [1] 1 3 5 7 9 (x &lt;- c(x, 11)) ## [1] 1 3 5 7 9 11 In the above line of code, x has been over-written as the vector which contain all the values of the original vector x but then also includes 11 as well. This type of idea of over-writing a given value using itself has been seen already (count variable at the start of this session) and is a very common technique. vec &lt;- c() for (i in 1:20){ rand &lt;- rnorm(1, mean = 0, sd = 1) # This generates a standard normal random variable if(rand &gt; 0){ vec &lt;- c(vec,rand) } } vec ## [1] 0.005512954 1.498507015 0.293155615 0.276509132 2.039636613 1.849125749 ## [7] 0.807890904 0.080278717 0.099427783 1.078409010 2.023306983 0.207384631 ## [13] 0.515240159 Alternatively, you could actually save each value in the vector as a particular element, e.g. vec &lt;- c() vec ## NULL for (i in 1:20){ rand &lt;- rnorm(1, mean = 0, sd = 1) if(rand &gt; 0){ vec[i] &lt;- rand } } vec ## [1] NA NA NA 0.1392454 1.2637265 NA 0.7050683 ## [8] NA 0.9163221 0.2384281 1.0067351 NA NA 0.4972835 ## [15] 0.3291732 2.0054633 NA NA NA 0.3183235 In fact, you could have easily set this up to store all the values in a Matrix rather than a vector (mat &lt;- matrix(c(rep(NA, 16)), nrow = 4)) ## [,1] [,2] [,3] [,4] ## [1,] NA NA NA NA ## [2,] NA NA NA NA ## [3,] NA NA NA NA ## [4,] NA NA NA NA for (i in 1:4){ for (j in 1:4){ rand &lt;- rnorm(1, mean = 0, sd = 1) if(rand &gt; 0){ mat[i,j] &lt;- rand } } } mat ## [,1] [,2] [,3] [,4] ## [1,] 0.6653966 NA NA 1.369854 ## [2,] 0.5747815 0.2128382 NA NA ## [3,] NA NA NA NA ## [4,] NA 0.5684018 1.056248 NA 3.2 While loops The final tool we will consider in the area of loops, is the so-called ‘WHILE loop’. A While loop is similar to a for loop but instead of simply looping through different values of a specified vector (i in 1:10) it will continue to loop whilst a certain condition holds and will only stop when this condition is no longer satisfied. For example: i &lt;- 1 while (i &lt; 6) { print(i) i &lt;- i+1 } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 WARNING - Be very careful when using while loops. If you do not write them correctly they can result in your code running infinitely. As an example, try seeing what happens if you forget to increment i to add one each time. i &lt;- 1 while (i &lt; 6) { print(i) } While loops are very helpful when the number of loops required is unknown. For example, imagine we wanted to find the smallest integer for which the sum of all positive integers up to this value was greater than 1000. This can easily be done using a while loop. i &lt;- 1 sum &lt;- 0 while(sum &lt; 1000){ sum &lt;- sum + i if (sum &lt; 1000){ i &lt;- i + 1 } else { print(i) } } ## [1] 45 sum(1:44) ## [1] 990 sum(1:45) ## [1] 1035 Exercise 3.4 Create a variable called speed and assign this a rounded random uniform distributed value between 50 - 60, i.e. round(runif(1, 50, 60)). Using a while loop, create a code that prints “Your speed is ?? - Slow Down” if speed is greater than 30 then takes 7 off the speed variable. If speed is less than or equal to 30 it should print out “Your speed is ?? - Thank you for not speeding”. I appreciate this is a lot to take in for those who are not familiar with programming but I assure these ideas become second nature with a little practice. We will use them in a larger exercise in the last session so you can see how and when these things would all be used in a practical example. However, for now, I highly recommend that you complete the exercises in DataCamp on conditional statements and loops (Intermediate R) for extra practice. There are other versions and common commands used in loops, namely break, next and repeats, but I will leave these for you to explore in your own time (ideally via DataCamp). You will need these for the exercises below. 3.3 Exercises Use the command x &lt;- rexp(20, rate = 0.5) to create a vector containing 20 simulations of an Exponential random variable with mean \\(2\\). Using a loop, return the number of values that are larger than the sample mean of the vector x. You are allowed to use the mean() function. Write a while() loop which prints out the odd numbers from 1 through 7. Using for() loops, generate and print the first 20 values of the famous Fibonacci sequence (starting with \\(0, 1\\)). Recall, the Fibonacci sequence is obtained by evaluating the next number in the sequence as the sum of the previous two numbers in the sequence. By altering your code in the previous question, use a while() loop to determine how many values the Fibonacci sequence contains before its value exceeds 100,000. Use a while() loop to determine the smallest value of \\(x\\) such that \\[\\begin{equation*} \\prod_{n=1}^x n &gt; 10^{6}. \\end{equation*}\\] Using a for() loop, simulate the flip of a fair coin twenty times, keeping track of the individual outcomes (1 = Heads, 0 = Tails) in a vector. [Hint: You can simulate random numbers that follow given distributions. For example, normal random numbers using rnorm(), exponential using rexp() as seen in Problem 1 or binomial random values using rbinom(). Moreover, the Bernoulli distribution with success parameter \\(p \\in [0,1]\\), which gives a value of 0 or 1, is nothing but a binomial distribution with parameters \\(n =1\\) and \\(p\\).] Can you solve the previous problem again without the use of for() loops? Using for() loops, fill a \\(5 \\times 5\\) matrix with simulated values from the Poisson distribution having parameter \\(\\lambda = 5\\) (rpois(n, lambda = 5)). Do this again but without using loops, only ‘vectorised calculations’. Advanced Extension: Can you modify the above to only fill the matrix with simulated values between 1 and 8? Hint: You will have to use the repeat and break commands. 3.4 Applied Exercises The problems below are a little more involved and may take some time. Please have a go at these but do not worry if you find this difficult, we will actually see something similar to this again next semester. Assume that the daily returns on an asset are normally distributed with mean 0 and standard deviation of 0.01. Assuming that the starting price is £100, write a while() loop to simulate the daily stock price of this asset until the moment it exceeds £150 or falls below £50. [Recall: You can simulate a normal random value using the following command rnorm(n, mean = , sd = ) where \\(n\\) is the number of values you want to simulate] How many days does it take for the stock price to exceed £150 or drop below £50? Plot the path of the stock price over time using the plot() function. Using a for() loop, repeat the first step 100 times and provide an estimate for the number of days it will take to exceed £150 or drop below £50. Simulate the stock price for exactly 365 days. If the price exceeds £150 or falls below £50, stop the simulation and ask R to print out the value of the stock at this point. By repeating a similar idea to the previous step 100 times, can you estimate the probability that the stock price will either exceed £150 or drop below £50. 3.5 DataCamp course(s) https://www.datacamp.com/courses/intermediate-r (Intermediate R Course) https://app.datacamp.com/learn/courses/intermediate-r-for-finance (Intermidiate R for Finance Course) "],["functions.html", "Week4 Functions 4.1 Creating functions 4.2 Prime number calculator - example 4.3 Multiple Input Variables 4.4 Exercises 4.5 DataCamp course(s)", " Week4 Functions In the previous weeks, we have already encountered and worked with some of R’s pre-defined functions that you can use on your data/objects to produce certain results. For example, the mean() function, var() function or even plot() function. Each of these ‘functions’ require one (or more) input variables, then provide some output. Although these functions are readily available for you to use in the base packages, the functions themselves have actually been created from scratch and primarily consist solely of basic programming techniques we have already discussed, e.g. loops, conditional statements etc. 4.1 Creating functions In this section, we are going to discuss how to create our own functions. There are two main reasons for wanting to create your own functions: To reuse a series of code over and over again without having to re-write the same code (especially if the code is complex and long) For other people to use in their programming (similar to how we have already used some of the functions other people have created) To create a function in R, we need to following steps: Choose of a name for the function Consider the input variables that will be required for the function Use the following lines of code: functionname &lt;- function(input1, input2, ...){ Commands to execute for function using input variables listed } As a basic example, let us re-create the mean() function ourselves from scratch: mean(1:100) # Remind ourselves how the mean() function works ## [1] 50.5 mean_function &lt;- function(x){ sum(x)/length(x) } mean_function(1:100) ## [1] 50.5 mean_function(5:5000) ## [1] 2502.5 As you can see in the above, once the function has been created and given a name, in this case mean_function() it can now be called and used like any other pre-defined function. (vec &lt;- rexp(100, rate = 1)) ## [1] 0.233062571 0.287785502 0.635319289 0.665331448 0.099118779 0.319374929 ## [7] 0.030674642 1.862398766 0.189140707 0.399991057 0.112924471 0.402592935 ## [13] 0.300230652 1.007858773 1.133081333 0.177681225 0.959252605 0.796021482 ## [19] 0.860415824 0.309252647 0.571253570 0.113867391 0.138248821 2.041111238 ## [25] 0.657329419 3.031535724 1.174595118 0.010152092 0.865131355 0.758500003 ## [31] 1.113312119 0.420498796 0.026373402 0.295133093 0.424081943 0.202073025 ## [37] 0.360592224 2.477918086 1.987166641 1.925566325 1.849179139 1.307377508 ## [43] 1.264218544 0.187345587 0.878255324 0.116979238 0.211217160 0.805113044 ## [49] 0.004945884 0.955366756 0.199257377 1.067233632 0.612793300 0.893734290 ## [55] 0.536592008 1.602893557 1.501353474 3.579520688 0.463349212 1.719331898 ## [61] 0.062045055 0.350623705 0.976738160 1.247234407 0.248120417 1.872900145 ## [67] 0.198102107 0.369280057 1.147851179 0.960012237 0.924871236 0.623059175 ## [73] 0.925353289 0.468828540 0.296698745 3.807578346 0.066638329 0.534605446 ## [79] 2.539649268 1.436552302 0.836982440 0.603102823 0.177597011 0.495244812 ## [85] 0.103623640 0.409421449 0.099164369 0.308665173 5.306004584 0.345620009 ## [91] 0.262301464 2.016079178 3.418144993 0.240982255 0.480893278 1.417750526 ## [97] 1.776156085 0.546648572 0.141083874 0.850725687 mean(vec) ## [1] 0.8802494 mean_function(vec) ## [1] 0.8802494 As you can see from this simply example, it is even possible to use functions inside functions, e.g. we have used the sum() and length() functions inside our newly created function. Exercise 4.1 Can you create a function called sum_function which sums up all of the values in a vector without using the predefined sum() function? Exercise 4.2 Using IF statements, can you create a function that rounds a number to its nearest integer (.5 rounds up)? You cannot use the already pre-defined round() function. Of course, some functions are much more complicated underneath the surface. For example, the lm() function executes a full ‘linear regression’ fitting to a set of data and returns a variety of information about the fitted model: fit &lt;- lm(mtcars$mpg ~ mtcars$hp) summary(fit) ## ## Call: ## lm(formula = mtcars$mpg ~ mtcars$hp) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5.7121 -2.1122 -0.8854 1.5819 8.2360 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 30.09886 1.63392 18.421 &lt; 2e-16 *** ## mtcars$hp -0.06823 0.01012 -6.742 1.79e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.863 on 30 degrees of freedom ## Multiple R-squared: 0.6024, Adjusted R-squared: 0.5892 ## F-statistic: 45.46 on 1 and 30 DF, p-value: 1.788e-07 Note: Do not worry about understanding all of this output here, it is included purely for the sake of an example. Although such functions may look much more complicated, they are still ultimately only made up of combinations of basic commands (albeit many lines of them), the concept is much the same and only requires more thought. As an example of a slightly more complicated function, let us create a prime number calculator: 4.2 Prime number calculator - example prime &lt;- function(number){ flag &lt;- 0 if(number == 2){ flag &lt;- 1 } else if (number &gt; 2) { # check for factors flag &lt;- 1 for(i in 2:(number-1)) { if ((number %% i) == 0) { flag &lt;- 0 break } } } if(flag == 1) { print(paste(number,&quot;is a prime number&quot;)) } else { print(paste(number,&quot;is not a prime number&quot;)) } } prime(7) ## [1] &quot;7 is a prime number&quot; prime(986376383) ## [1] &quot;986376383 is not a prime number&quot; 4.3 Multiple Input Variables In the functions we have created so far, we have only considered one input variable. However, it is possible to create functions with multiple inputs. For example, imagine we wanted to find the accumulated value of an investment over some time period under compound interest. In such a problem, you have three different possible inputs: Initial investment annual interest rate Time (years): Acc_value &lt;- function(initial, interest, years){ value &lt;- initial*(1+interest)^years return(value) } Acc_value(100000, 0.05, 25) ## [1] 338635.5 Acc_value(100,0.05,10) ## [1] 162.8895 Notice how much easier this is now that we have created a function. Before functions, we would have had to define each variable as a set value, then run the calculation and every time we wanted to calculate it for a new set of values, we would have to change them individually and run it all again, i.e., initial &lt;- 100000 interest &lt;- 0.05 years &lt;- 25 initial*(1+interest)^years ## [1] 338635.5 Creating functions avoids this tedious problem but also allows us to use them inside other calculations or even other functions (see later). Before we look at some examples of functions working inside of functions, we note that functions also work with vectors: (x &lt;- seq(0.01, 0.06, by = 0.005)) ## [1] 0.010 0.015 0.020 0.025 0.030 0.035 0.040 0.045 0.050 0.055 0.060 Acc_value(100000, x, 25) ## [1] 128243.2 145094.5 164060.6 185394.4 209377.8 236324.5 266583.6 300543.4 ## [9] 338635.5 381339.2 429187.1 In this case, the function works element-by-element wise in the usual way to create a vector of outputs. To see this implemented inside another function, let us consider the following example of plotting the various accumulated values calculated above using the plot() function: plot(x, Acc_value(100,x, 10), ylab = &quot;Accumulated Value (100)&quot;, xlab = &quot;Interest Rate&quot;) This particular use of the function within the plot() function will prove to be very useful for future assessments, where you are typically asked to compare certain quantities under varying conditions (interest rates, terms etc.) As another example, we recall that there are actually two different types of interest (Simple and Compound). Of course, we could create two separate functions for each of these. However, since these are related it would be nice to have a single function that could deal with both. This can easily by adding a new variable: Acc_value &lt;- function(initial, interest, years, type){ if (type == &quot;compound&quot;){ value &lt;- initial*(1+interest)^years return (value) } else if (type == &quot;simple&quot;){ value &lt;- initial*(1+(interest*years)) return (value) } else { print(&quot;Invalid Interest Type. Must either be &#39;compound&#39; or &#39;simple&#39;&quot;) } } Acc_value(100, 0.05, 10, &quot;simple&quot;) ## [1] 150 Acc_value(100,0.05,10, &quot;compound&quot;) ## [1] 162.8895 Acc_value(11, 0.05, 10, &quot;comp&quot;) ## [1] &quot;Invalid Interest Type. Must either be &#39;compound&#39; or &#39;simple&#39;&quot; An alternative way to do this to let the type variable by a Boolean value as we have seen in other functions: Acc_value &lt;- function(initial, interest, years, compound){ if (compound == TRUE){ value &lt;- initial*(1+interest)^years } else if (compound == FALSE){ value &lt;- initial*(1+(interest*years)) } return(value) } Acc_value(100, 0.05, 10, compound = FALSE) ## [1] 150 4.3.1 Default options In some cases, you can have variables within a function that can be changed but more often than not will take a certain value. In this case, you can set a default value for this variable which it will take if not explicitly defined in the function command: Acc_value &lt;- function(initial, interest, years, compound = TRUE){ if (compound == TRUE){ value &lt;- initial*(1+interest)^years } else if (compound == FALSE){ value &lt;- initial*(1+(interest*years)) } return(value) } Acc_value(100, 0.05, 10) ## [1] 162.8895 Acc_value(100, 0.05, 10, compound = FALSE) ## [1] 150 Finally, just as a nice example of the above application, we could further develop the interest function above: Acc_value &lt;- function(initial, interest, years, compound = TRUE, compare = FALSE){ comp_values &lt;- c(initial) for (i in 1:years){ comp_values &lt;- c(comp_values,initial*(1+interest)^i) } simp_values &lt;- c(initial) for (i in 1:years){ simp_values &lt;- c(simp_values, initial*(1+(interest*i))) } if (compare == FALSE){ if (compound == TRUE){ return(comp_values[length(comp_values)]) } else { return(simp_values[length(simp_values)]) } } if(compare == TRUE){ x &lt;- 0:years plot(x, comp_values, ylab = &quot;Accumulated Value&quot;, xlab = &quot;Year&quot;, main = &quot;Comparison of Interests&quot;, type = &quot;l&quot;, col = &quot;red&quot;) lines(x, simp_values, type = &quot;l&quot;, col = &quot;blue&quot;) legend(&quot;bottomright&quot;, legend = c(&quot;Compound&quot;, &quot;Simple&quot;), col = c(&quot;red&quot;, &quot;blue&quot;), lty = 1) } } Acc_value(100, 0.05, 10) ## [1] 162.8895 Acc_value(100, 0.05, 10, compound = FALSE) ## [1] 150 Acc_value(100,0.05, 10, compare = TRUE) Acc_value(10000, 0.04, 50, compare = TRUE) Now that you understand the basics of how functions work, try having a go at the following exercises. 4.4 Exercises In the above, we discussed how to re-create the sum() and mean() function from programming basics. In a similar way, create a function called variance that calculates the variance of a vector of values. You are allowed to use the pre-defined sum() and mean() functions inside your variance function. Try doing this in two different ways: Using For loops Using vectorised calculations. Create a function that, given an integer, will calculate how many divisors it has (other than 1 and itself). Make the divisors appear on the screen. From your ‘Introduction to Actuarial Science’ module, you should have come across the concept of ‘discounting’ and the ‘present value’ of money. Create a function in R called PV that takes 3 input variables: 1) Final value (F), 2) Annual interest rate and 3) Number of years, which calculates the present value of F. Recall that for geometric summation, we have \\[\\begin{equation*} \\sum_{k = 0}^{n-1} x^k = \\frac{1-x^n}{1-x}. \\end{equation*}\\] Moreover, if \\(|x| &lt; 1\\), the above summation converges as \\(n \\rightarrow \\infty\\), such that \\[\\begin{equation*} \\sum_{k = 0}^{\\infty} x^k = \\frac{1}{1-x}. \\end{equation*}\\] Create a function in R called GeomSum that takes two input variables (x and n) and calculates the geometric sum of x from 0 up to n. It should also be possible to include the option that \\(n = \\infty\\). Hint: You may have to include a Boolean value for this but remember, the above limit only exists under a given condition. If this condition is not satisfied, make the function print out a warning message. Recall from your ‘Introduction to Actuarial Science’ module that the ‘Accumulated Value’ of an annuity-due with unit payments is defined by \\[\\begin{equation*} \\ddot{s}_{n\\rceil} = \\sum_{k=1}^n (1+i)^k = \\frac{(1+i)^n -1}{i}\\times(1+i) \\end{equation*}\\] Create a function that takes three input variables representing 1) The value of repeated payments, 2) The annual interest rate and 3) The number of years. The function should create a vector with the accumulated value of the investment after each year and plot it on a basic plot against time (see the R Script for a similar example). Recall the Stock price example from the Applied exercises of the previous chapter. Create a function called Stock that allows the user to input a starting amount, the standard deviation of percentage change (assume the change is normally distributed \\(N(0, \\sigma^2)\\)) and the values of an upper and lower barrier. The function should then plot the movement of the stock and print out the number of days it takes to reach either the upper or lower barrier. 4.5 DataCamp course(s) https://www.datacamp.com/courses/intermediate-r (Intermediate R Course) https://www.datacamp.com/courses/intermediate-r-for-finance (Intermediate R for Finance Course) "],["data-analysis.html", "Week5 Data Analysis 5.1 Creating a data frame 5.2 Importing data - Excel 5.3 Manipulating and analysing data 5.4 Conditional extraction 5.5 Adding data 5.6 The apply family 5.7 Exercises 5.8 DataCamp course(s)", " Week5 Data Analysis In this session we will discuss how to create data frames (objects similar to matrices which are typically used to store data) manually (explaining how this differs from a matrix), methods of extracting and manipulating data effectively and, finally, use of the apply() function(s). 5.1 Creating a data frame We have already been introduced to the idea of a data frame in the previous sessions through the `mtcars’ data set: str(mtcars) ## &#39;data.frame&#39;: 32 obs. of 11 variables: ## $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... ## $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... ## $ disp: num 160 160 108 258 360 ... ## $ hp : num 110 110 93 110 175 105 245 62 95 123 ... ## $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... ## $ wt : num 2.62 2.88 2.32 3.21 3.44 ... ## $ qsec: num 16.5 17 18.6 19.4 17 ... ## $ vs : num 0 0 1 1 0 1 0 1 1 1 ... ## $ am : num 1 1 1 0 0 0 0 0 0 0 ... ## $ gear: num 4 4 4 3 3 3 3 4 4 4 ... ## $ carb: num 4 4 1 1 2 1 4 2 2 4 ... However, in general, a data frame is simply an array of data, where each row denotes a separate data point or observation and each column a different variable. Why are these different from matrices in R? The main difference between a ‘matrix’ and a ‘dataframe’ in R is what can be stored within them. We have already stated that a matrix (like a vector) can consist of numerical values OR Boolean values OR character strings. However, what I have not yet mentioned is they cannot be a mixture of these things: V1 &lt;- c(1, 2, 3) str(V1) ## num [1:3] 1 2 3 V2 &lt;- c(&quot;Hello&quot;, &quot;Red&quot;, &quot;UK&quot;) str(V2) ## chr [1:3] &quot;Hello&quot; &quot;Red&quot; &quot;UK&quot; V3 &lt;- c(T, T, F) str(V3) ## logi [1:3] TRUE TRUE FALSE (V &lt;- c(V1, V2, V3)) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;Hello&quot; &quot;Red&quot; &quot;UK&quot; &quot;TRUE&quot; &quot;TRUE&quot; &quot;FALSE&quot; str(V) ## chr [1:9] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;Hello&quot; &quot;Red&quot; &quot;UK&quot; &quot;TRUE&quot; &quot;TRUE&quot; &quot;FALSE&quot; (M &lt;- matrix(c(V1, V2, V3), nrow = 3, ncol = 3, byrow = FALSE)) ## [,1] [,2] [,3] ## [1,] &quot;1&quot; &quot;Hello&quot; &quot;TRUE&quot; ## [2,] &quot;2&quot; &quot;Red&quot; &quot;TRUE&quot; ## [3,] &quot;3&quot; &quot;UK&quot; &quot;FALSE&quot; str(M) ## chr [1:3, 1:3] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;Hello&quot; &quot;Red&quot; &quot;UK&quot; &quot;TRUE&quot; &quot;TRUE&quot; &quot;FALSE&quot; As you can see in the above, since a matrix can only consists of objects of the same type, R has automatically re-assigned the objects to match with one of the object types. Again, this is a perfect example of why you need to be so careful when programming as your code may appear to work but the reality is quite different. Data frames on the other hand, allow us to create a matrix like structure but each column may take on a different variable format. This is ideal when working and storing data. Let us look at how to create a data frame using the above vectors V1, V2 and V3: data &lt;- data.frame(Numeric = V1, Characters = V2, Boolean = V3) knitr::kable(data, align = &quot;ccc&quot;) Numeric Characters Boolean 1 Hello TRUE 2 Red TRUE 3 UK FALSE str(data) ## &#39;data.frame&#39;: 3 obs. of 3 variables: ## $ Numeric : num 1 2 3 ## $ Characters: chr &quot;Hello&quot; &quot;Red&quot; &quot;UK&quot; ## $ Boolean : logi TRUE TRUE FALSE What do you notice about the character strings in this data frame? It is important to decide if any ‘words’ or ‘character strings’ in your data set are simply words or if they resemble different factors of a given group. In the latter case, you need to tell R this! This is very important when applying a variety of statistical functions to your data. data1 &lt;- data.frame(Numeric = V1, Characters = V2, Boolean = V3, stringsAsFactors = F) str(data1) ## &#39;data.frame&#39;: 3 obs. of 3 variables: ## $ Numeric : num 1 2 3 ## $ Characters: chr &quot;Hello&quot; &quot;Red&quot; &quot;UK&quot; ## $ Boolean : logi TRUE TRUE FALSE data2 &lt;- data.frame(Numeric = V1, Characters = V2, Boolean = V3, stringsAsFactors = T) str(data2) ## &#39;data.frame&#39;: 3 obs. of 3 variables: ## $ Numeric : num 1 2 3 ## $ Characters: Factor w/ 3 levels &quot;Hello&quot;,&quot;Red&quot;,..: 1 2 3 ## $ Boolean : logi TRUE TRUE FALSE rownames(data1) &lt;- c(&quot;Observation 1&quot;, &quot;Observation 2&quot;, &quot;Observation 3&quot;) knitr::kable(data1, align = &quot;ccc&quot;) Numeric Characters Boolean Observation 1 1 Hello TRUE Observation 2 2 Red TRUE Observation 3 3 UK FALSE Now that we have created our data frame, we can begin to analyse the data in any way we choose! We will discuss a little later on more complex ways in which we may want to do this. For now, let us look at one more example to make sure we understand how data frames are created: Height &lt;- rgamma(20, shape = 70, rate = 0.4) # Simulates/generates Gamma Distributed variables head(Height) ## [1] 170.9156 181.1166 168.5910 167.8381 182.4901 167.1970 Weight &lt;- rnorm(20, mean = 75, sd = 10) head(Weight) ## [1] 81.09672 79.93742 80.71258 93.52026 89.88747 75.15317 Age &lt;- rpois(20, lambda = 20) # Simulates/generates Poisson Distributed variables Age ## [1] 26 25 24 21 13 18 16 18 17 16 16 25 23 25 11 18 9 25 16 32 Sex&lt;- ifelse(rbinom(20,1,prob=0.5) == 1, &quot;Male&quot;, &quot;Female&quot;) # How has this worked? Data &lt;- data.frame(Height_cm = Height, Weight_Kg = Weight, Age_Years = Age, Sex = Sex, stringsAsFactors = T) knitr::kable(Data, align = &quot;cccc&quot;) Height_cm Weight_Kg Age_Years Sex 170.9156 81.09672 26 Male 181.1166 79.93742 25 Female 168.5910 80.71258 24 Male 167.8381 93.52026 21 Male 182.4901 89.88747 13 Female 167.1970 75.15317 18 Female 179.8358 66.55078 16 Female 223.4046 66.04828 18 Female 145.5981 64.27430 17 Male 161.1306 57.32481 16 Female 168.2054 69.40757 16 Male 202.3597 70.67010 25 Female 179.2911 65.57485 23 Female 185.9143 77.64834 25 Female 157.8038 71.06964 11 Male 184.9215 67.06691 18 Female 209.7603 79.70949 9 Female 198.0268 76.11750 25 Male 158.8328 91.74831 16 Female 172.3133 68.90627 32 Male str(Data) ## &#39;data.frame&#39;: 20 obs. of 4 variables: ## $ Height_cm: num 171 181 169 168 182 ... ## $ Weight_Kg: num 81.1 79.9 80.7 93.5 89.9 ... ## $ Age_Years: int 26 25 24 21 13 18 16 18 17 16 ... ## $ Sex : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 1 2 2 1 1 1 1 2 1 ... mean(Data$Height_cm) ## [1] 178.2773 mean(Data$Height_cm &gt; 170) ## [1] 0.6 Another helpful tool worth mentioning here when analysing data in a data frame is the table() function, which counts the frequency of different observations and displays them in a table format: table(Data$Age_Years) ## ## 9 11 13 16 17 18 21 23 24 25 26 32 ## 1 1 1 4 1 3 1 1 1 4 1 1 table(Data$Age_Years,Data$Sex) ## ## Female Male ## 9 1 0 ## 11 0 1 ## 13 1 0 ## 16 3 1 ## 17 0 1 ## 18 3 0 ## 21 0 1 ## 23 1 0 ## 24 0 1 ## 25 3 1 ## 26 0 1 ## 32 0 1 5.2 Importing data - Excel In most cases when working with data, the observations will have been collected and stored in another programme which is better built for data collection, e.g. Excel. Fortunately, R can import such data easily and will save the imported values into a data frame type object (known as a tibble) automatically. It is also possible to save it directly as a data frame explicitly if preferred. At this stage, the differences between tibble and a data frame are not important. To do this, use the following steps: Click the Import Dataset option within the Environment window (Top right) Click ‘From Excel…’ (You may be asked to install some packages here, if so press ‘Yes’ or ‘Okay’) Click `Browse’ to enter your files Choose the Excel file containing the Data Edit the Dataset name (if necessary) Choose which sheet you want to import from the Excel file (if necessary) Decide if you need to skip any rows due to format Tick first row as names if appropriate Press import Re-save as a data frame (if necessary) In this example I will import four different data sets (Male and Female Deaths and Population in UK) from the ‘UK(Pop&amp;Death).xls’ data set and name them 1) Male_UK_Death, 2) Female_UK_Death, 3) Male_UK_Pop and 4) Female_UK_Pop, respectively. Clearly I cannot show you the above steps explicitly in these notes, but they are the steps that have been used to load the data here. Below is an example of what the corresponding code that is executed looks like when following these steps (you may find that your directory path where you have saved the data is different but that should be it): library(readxl) Male_UK_Death &lt;- read_excel(&quot;UK(Pop&amp;Death).xls&quot;, sheet = &quot;UK male deaths&quot;) Female_UK_Death &lt;- read_excel(&quot;UK(Pop&amp;Death).xls&quot;, sheet = &quot;UK female deaths&quot;) Male_UK_Pop &lt;- read_excel(&quot;UK(Pop&amp;Death).xls&quot;, sheet = &quot;UK male pop&quot;) Female_UK_Pop &lt;- read_excel(&quot;UK(Pop&amp;Death).xls&quot;, sheet = &quot;UK female pop&quot;) Note: It is also possible to import data from a number of other sources (SPSS, Stata, SAS, .csv files etc.) 5.3 Manipulating and analysing data In many cases, the data set that we have imported may not be exactly how we want it for our analysis. There are a huge number of things that you may want/need to do to your data to tidy it up or ‘clean’ the data as it is commonly known. For example, deal with missing data, extract unimportant rows/columns, delete outliers, combine data sets etc. As an example, let us have a little look at the data sets we created: We would like to remove the last two rows of this data set as they don’t contain ‘raw’ data. Male_UK_Death_New &lt;- Male_UK_Death[-c(107, 108),] datatable(Male_UK_Death_New, options=list(scrollX = TRUE)) Then, in a similar way, we can do the same with the rest of the data sets as they have same problem Female_UK_Death_New &lt;- Female_UK_Death[-c(107, 108),] Male_UK_Pop_New &lt;- Male_UK_Death[-c(107, 108),] Female_UK_Pop_New &lt;- Female_UK_Pop[-c(107, 108),] We have now tidied up our data to be in a format more beneficial to us and we could start to analyse these individually, i.e. Create plots, calculate statistics, fit statistical models etc. For example: Aux &lt;- Male_UK_Death_New[-106,] summary(lm(Aux$Age ~ Aux$`1961`)) ## ## Call: ## lm(formula = Aux$Age ~ Aux$`1961`) ## ## Residuals: ## Min 1Q Median 3Q Max ## -81.594 -17.102 -2.754 6.391 62.101 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.189e+01 3.686e+00 11.367 &lt; 2e-16 *** ## Aux$`1961` 3.296e-03 7.947e-04 4.147 6.94e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 28.33 on 103 degrees of freedom ## Multiple R-squared: 0.1431, Adjusted R-squared: 0.1348 ## F-statistic: 17.2 on 1 and 103 DF, p-value: 6.937e-05 However, what if we were not interested in the individual data sets separated by sex and only cared about the overall deaths and population. That is, we want to combine the data sets. In this case, we need to create a new data frame with the relevant data. Overall_Deaths &lt;- data.frame(Male_UK_Death_New$Age, Male_UK_Death_New[,-1] + Female_UK_Death_New[,-1]) colnames(Overall_Deaths) &lt;- colnames(Male_UK_Death_New) datatable(Overall_Deaths, options=list(scrollX=TRUE)) Overall_Pop &lt;- data.frame(Male_UK_Pop_New$Age, Male_UK_Pop_New[,-1]+Female_UK_Pop_New[,-1]) colnames(Overall_Pop) &lt;- colnames(Male_UK_Pop_New) datatable(Overall_Pop, options=list(scrollX=TRUE)) Exercise 5.1 Use these two data sets to create a data frame consisting of the mortality rates for the UK population over each year. That is, the probability of dying in a given year based on your age? Before we carry on, let us actually have a look at this data visually now that we have created it: plot(0:105, Overall_Pop$`1961`, type = &quot;l&quot;, main = &quot;UK Population by Age 1961&quot;, xlab = &quot;Age&quot;, ylab = &quot;Population&quot;) Exercise 5.2 As actuaries, you need to be able to critically analyse data, not just use it. What do you think is the reason for these spikes and falls in the data? plot(0:105, Overall_Pop$`1961`, type = &quot;l&quot;, main = &quot;UK Population by Age 1961&quot;, xlab = &quot;Age&quot;, ylab = &quot;Population&quot;) abline(v = 14, col = &quot;red&quot;, lty = 2) abline(v = 40, col = &quot;red&quot;, lty = 2) abline(v = 43, col = &quot;blue&quot;, lty = 2) Exercise 5.3 Why would these spikes be of such importance to us as actuaries? Exercise 5.4 Can you plot the mortality rates for every single year on one plot? Hint: Note that the line colours can also be represented by numbers, e.g., col = 1. 5.4 Conditional extraction There may be circumstances where you want to consider some analysis of a data set, but you may only be interested in particular observations that satisfy certain conditions. For example, assume we wanted to price a pension annuity (regular payments until death), then we would only be interested in the Mortality rates of pensioners (65+). We can extract this information using the conditional arguments we have seen in previous sessions. However, before we can do this, we have to amend the Age values in the Mortality data set to be numerical/integer values rather than characters: ## Age 1961 1962 1963 1964 1965 1966 1967 1968 1969 ## 1 0 0.04584 0.04606 0.04472 0.04271 0.03995 0.04000 0.03808 0.03815 0.03696 ## 2 1 0.00316 0.00299 0.00308 0.00267 0.00263 0.00279 0.00259 0.00255 0.00260 ## 3 2 0.00200 0.00173 0.00175 0.00161 0.00162 0.00170 0.00162 0.00164 0.00164 ## 4 3 0.00140 0.00137 0.00137 0.00121 0.00132 0.00130 0.00117 0.00137 0.00112 ## 5 4 0.00114 0.00110 0.00126 0.00109 0.00116 0.00118 0.00101 0.00109 0.00108 ## 6 5 0.00099 0.00106 0.00099 0.00101 0.00102 0.00096 0.00088 0.00092 0.00092 ## 1970 1971 1972 1973 1974 1975 1976 1977 1978 ## 1 0.03805 0.03619 0.03468 0.03424 0.03391 0.03196 0.02916 0.02905 0.02810 ## 2 0.00237 0.00235 0.00236 0.00229 0.00229 0.00210 0.00200 0.00176 0.00199 ## 3 0.00151 0.00143 0.00158 0.00144 0.00135 0.00120 0.00118 0.00121 0.00110 ## 4 0.00114 0.00112 0.00128 0.00124 0.00116 0.00106 0.00092 0.00097 0.00096 ## 5 0.00098 0.00093 0.00097 0.00093 0.00084 0.00085 0.00079 0.00082 0.00077 ## 6 0.00085 0.00090 0.00083 0.00090 0.00078 0.00074 0.00076 0.00067 0.00068 ## 1979 1980 1981 1982 1983 1984 1985 1986 1987 ## 1 0.02702 0.02512 0.02261 0.02241 0.02087 0.01989 0.01922 0.01947 0.01893 ## 2 0.00165 0.00170 0.00159 0.00162 0.00143 0.00156 0.00159 0.00137 0.00138 ## 3 0.00103 0.00105 0.00101 0.00096 0.00089 0.00084 0.00091 0.00085 0.00085 ## 4 0.00081 0.00075 0.00076 0.00067 0.00066 0.00070 0.00072 0.00067 0.00062 ## 5 0.00074 0.00071 0.00069 0.00056 0.00063 0.00050 0.00052 0.00054 0.00052 ## 6 0.00065 0.00065 0.00055 0.00050 0.00055 0.00049 0.00045 0.00044 0.00045 ## 1988 1989 1990 1991 1992 1993 1994 1995 1996 ## 1 0.01838 0.01722 0.01642 0.01492 0.01333 0.01303 0.01249 0.01256 0.01276 ## 2 0.00133 0.00130 0.00133 0.00129 0.00107 0.00103 0.00104 0.00094 0.00096 ## 3 0.00085 0.00085 0.00072 0.00076 0.00067 0.00068 0.00061 0.00054 0.00061 ## 4 0.00070 0.00068 0.00061 0.00055 0.00051 0.00052 0.00041 0.00045 0.00039 ## 5 0.00050 0.00054 0.00045 0.00044 0.00041 0.00041 0.00037 0.00030 0.00036 ## 6 0.00042 0.00048 0.00039 0.00041 0.00036 0.00035 0.00028 0.00034 0.00032 ## 1997 1998 1999 2000 2001 2002 2003 2004 2005 ## 1 0.01189 0.01160 0.01175 0.01139 0.01131 0.01088 0.01108 0.01061 0.01044 ## 2 0.00094 0.00095 0.00094 0.00078 0.00077 0.00086 0.00080 0.00082 0.00079 ## 3 0.00057 0.00060 0.00063 0.00046 0.00048 0.00048 0.00050 0.00044 0.00043 ## 4 0.00039 0.00041 0.00042 0.00038 0.00036 0.00029 0.00040 0.00037 0.00034 ## 5 0.00034 0.00030 0.00030 0.00033 0.00032 0.00035 0.00031 0.00027 0.00021 ## 6 0.00031 0.00029 0.00027 0.00026 0.00026 0.00025 0.00027 0.00020 0.00020 ## 2006 2007 2008 2009 2010 2011 2012 2013 2014 ## 1 0.01036 0.01008 0.00968 0.00957 0.00902 0.00891 0.00837 0.00791 0.00791 ## 2 0.00082 0.00075 0.00071 0.00058 0.00064 0.00068 0.00060 0.00063 0.00057 ## 3 0.00045 0.00047 0.00039 0.00040 0.00034 0.00037 0.00030 0.00033 0.00031 ## 4 0.00031 0.00036 0.00035 0.00027 0.00030 0.00023 0.00023 0.00023 0.00025 ## 5 0.00026 0.00026 0.00026 0.00023 0.00021 0.00021 0.00021 0.00021 0.00015 ## 6 0.00023 0.00021 0.00024 0.00023 0.00019 0.00020 0.00023 0.00017 0.00017 ## 2015 2016 2017 ## 1 0.00795 0.00785 0.00796 ## 2 0.00057 0.00056 0.00042 ## 3 0.00029 0.00032 0.00030 ## 4 0.00023 0.00023 0.00021 ## 5 0.00020 0.00017 0.00020 ## 6 0.00014 0.00018 0.00018 class(Mortality$Age) ## [1] &quot;character&quot; Mortality$Age &lt;- 0:105 class(Mortality$Age) ## [1] &quot;integer&quot; Mort_pension &lt;- Mortality[Mortality$Age &gt;= 65, ] datatable(Mort_pension, options=list(scrollX=TRUE)) How does this work? This is a combination of conditional statements and extraction. In short, the conditional statement creates a vector of TRUE/FALSE values which are then used in the matrix type extraction technique we discussed in previous weeks. The result is that R will only extract the row(column) numbers corresponding to TRUE values. This is known as ‘conditional extraction’. Moreover, due to changes in technology and the NHS, we may decide that mortality rates pre-2000 are not valid enough to be used in our calculations, so we might only want to consider post-2000 values. Can we do this in a similar way? In general you will not be able to extract certain columns using conditional arguments since they represent different variables. However, you can do this by inspection, using matrix extraction and the which() function: which(colnames(Mortality) == &quot;2000&quot;) ## [1] 41 Mort_pension_2000 &lt;- Mort_pension[,c(1,41:ncol(Mort_pension))] datatable(Mort_pension_2000, options=list(scrollX=TRUE)) In general, it is possible to use the conditional argument format to extract rows from data sets, as long as you are conditioning on elements/variables within the data rather than column names. To see this, let us briefly revisit the mtcars data set from the previous sessions datatable(mtcars, options=list(scrollX=TRUE)) Assume that you only want to deal with cars that have 6 or 8 cylinders: data &lt;- mtcars[mtcars$cyl &gt;= 6, ] datatable(data, options=list(scrollX=TRUE)) data1 &lt;- mtcars[mtcars$cyl &gt;= 6 &amp; mtcars$hp &gt; 100, ] datatable(data1, options=list(scrollX=TRUE)) 5.5 Adding data As well as extracting data from data frame, it is also possible to add new data to an existing data frame. That is, add a new observation (row) or even add a new variable (column) which is possibly even calculated using the rest of the data. There are a number of ways to add a new row to a dataframe but I find the easiest is to use something similar to row extraction but for an undefined row (non-existent row). Let us first create a data frame: new_data &lt;- data.frame(A = c(1,2,3), B = c(&quot;Pass&quot;, &quot;Fail&quot;, &quot;Pass&quot;), C = c(&quot;M&quot;, &quot;M&quot;, &quot;F&quot;)) knitr::kable(new_data, align=&quot;ccc&quot;) A B C 1 Pass M 2 Fail M 3 Pass F Now, we can add a new row/observation to this existing data frame: new_data[nrow(new_data)+1,] &lt;- c(4, &quot;Fail&quot;, &quot;M&quot;) knitr::kable(new_data, align=&quot;ccc&quot;) A B C 1 Pass M 2 Fail M 3 Pass F 4 Fail M However, this only really works when adding a single row. If you wanted to add another data frame, you can use the rowbind function rbind(): add_data &lt;- data.frame(A = c(5,6,7), B = c(&quot;Pass&quot;, &quot;Pass&quot;, &quot;Pass&quot;), C = c(&quot;F&quot;, &quot;M&quot;, &quot;F&quot;)) knitr::kable(add_data, align = &quot;ccc&quot;) A B C 5 Pass F 6 Pass M 7 Pass F new_data &lt;- rbind(new_data, add_data) knitr::kable(new_data, align = &quot;ccc&quot;) A B C 1 Pass M 2 Fail M 3 Pass F 4 Fail M 5 Pass F 6 Pass M 7 Pass F With this in mind, let us revisit the Mortality data set for pensioners post 2000: datatable(Mort_pension_2000, options=list(scrollX=TRUE)) If we want to add a new column/variable, you can do this in a very similar way as for rows. As an example, let us assume we want to add the mean of the mortality rates across years for the different ages. Exercise 5.5 Can you create a vector of the mean mortality rates for each age using loops? Now that we have calculated the value, let us add it to the data. This can be done using any of the following methods: ## [1] 0.02238 0.02459 0.02689 0.02942 0.03230 0.03530 0.03894 0.04307 0.04712 ## [10] 0.05205 0.05707 0.06277 0.06853 0.07508 0.08228 0.09053 0.09886 0.10854 ## [19] 0.11907 0.13048 0.14266 0.15547 0.16949 0.18491 0.20157 0.21859 0.23699 ## [28] 0.25800 0.27941 0.30027 0.32597 0.35101 0.37298 0.39781 0.42344 0.45314 ## [37] 0.48835 0.51654 0.55021 0.57178 0.61910 Method 1 Mort_pension_2000[,ncol(Mort_pension_2000)+1] &lt;- mean_mort colnames(Mort_pension_2000)[ncol(Mort_pension_2000)] &lt;- c(&quot;Mean&quot;) datatable(Mort_pension_2000, options=list(scrollX=TRUE)) Method 2 Mort_pension_2000 &lt;- Mort_pension_2000[,-ncol(Mort_pension_2000)] # This just removes the last column we added Mort1 &lt;- cbind(Mort_pension_2000, mean_mort) colnames(Mort1)[ncol(Mort1)] &lt;- c(&quot;Mean&quot;) datatable(Mort1, options=list(scrollX=TRUE)) Method 3 Mort2 &lt;- data.frame(Mort_pension_2000, mean_mort) colnames(Mort2) &lt;- c(colnames(Mort_pension_2000), &quot;Mean&quot;) datatable(Mort2, options=list(scrollX=TRUE)) 5.6 The apply family The final tool I want to talk about in this R module is the family of functions known as the apply() functions. Put simply, the apply() function, along with the its counterparts lapply(), sapply() and vapply() allow us to ‘apply’ a particular function on each row and/or column of a data frame (and other objects) without using loops. The apply() function is basically a quicker and more convenient version of a for() loop and should always be considered first before loops as they are easier to write, read and are a lot quicker to execute which makes a huge difference when working with larger data sets. The apply() function takes 3 main inputs (it can take more and we will discuss this soon). The first is the object you want to ‘apply’ the function to, in our case today a data frame. The second is either of the following: 1, 2, or c(1,2) where 1 indicates you want the function to be applied to the rows of the object,2 for the columns of the object and c(1,2) to individual elements. Finally, the third input is the name of the function we want to apply. As an example, let us look at finding the means for each row of the Mort_pension_2000 data frame as we did before using for() loops. apply(Mort_pension_2000[,-1], 1, mean) ## 66 67 68 69 70 71 72 ## 0.02238278 0.02459333 0.02689389 0.02942444 0.03229556 0.03530389 0.03894056 ## 73 74 75 76 77 78 79 ## 0.04306944 0.04711944 0.05205222 0.05707333 0.06277167 0.06853056 0.07508111 ## 80 81 82 83 84 85 86 ## 0.08228333 0.09053167 0.09885667 0.10854167 0.11906778 0.13048222 0.14266278 ## 87 88 89 90 91 92 93 ## 0.15546722 0.16949222 0.18490833 0.20157111 0.21858556 0.23699167 0.25800444 ## 94 95 96 97 98 99 100 ## 0.27940611 0.30027000 0.32596778 0.35100611 0.37298056 0.39781444 0.42343833 ## 101 102 103 104 105 106 ## 0.45313778 0.48834833 0.51654222 0.55021222 0.57178500 0.61909778 Does the output seem a little strange? You should notice that the row names are not the actual ages but the row number the ages were on! Again, be careful. Although, this can be easily rectified: rownames(Mort_pension_2000) &lt;- 65:105 apply(Mort_pension_2000[,-1], 1, mean) ## 65 66 67 68 69 70 71 ## 0.02238278 0.02459333 0.02689389 0.02942444 0.03229556 0.03530389 0.03894056 ## 72 73 74 75 76 77 78 ## 0.04306944 0.04711944 0.05205222 0.05707333 0.06277167 0.06853056 0.07508111 ## 79 80 81 82 83 84 85 ## 0.08228333 0.09053167 0.09885667 0.10854167 0.11906778 0.13048222 0.14266278 ## 86 87 88 89 90 91 92 ## 0.15546722 0.16949222 0.18490833 0.20157111 0.21858556 0.23699167 0.25800444 ## 93 94 95 96 97 98 99 ## 0.27940611 0.30027000 0.32596778 0.35100611 0.37298056 0.39781444 0.42343833 ## 100 101 102 103 104 105 ## 0.45313778 0.48834833 0.51654222 0.55021222 0.57178500 0.61909778 Using this simple execution, we could add the mean column to our original data set using the following lines of code: Mort3 &lt;- cbind(Mort_pension_2000, round(apply(Mort_pension_2000[,-1], 1, mean),digits = 5)) colnames(Mort3)[ncol(Mort3)] &lt;- &quot;Mean&quot; datatable(Mort3, options=list(scrollX=TRUE)) Exercise 5.6 With this in mind, can you now add the standard deviation for each age to the end of Mort3, using the apply() function? Just so you can see how this works let’s look at the same function applied to columns: apply(Mort_pension_2000[,-1], 2, mean) ## 2000 2001 2002 2003 2004 2005 2006 2007 ## 0.2137400 0.2107917 0.2145129 0.2197032 0.2065780 0.2114468 0.2028490 0.2057312 ## 2008 2009 2010 2011 2012 2013 2014 2015 ## 0.2130668 0.1988127 0.1993746 0.1943022 0.2038222 0.2058556 0.1969544 0.2119524 ## 2016 2017 ## 0.2002280 0.2057351 Finally, let us try on the individual elements (obviously we will have to use something other than mean here): head(apply(Mort_pension_2000, c(1,2), class)) ## Age 2000 2001 2002 2003 2004 2005 ## 65 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 66 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 67 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 68 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 69 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 70 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 2006 2007 2008 2009 2010 2011 2012 ## 65 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 66 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 67 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 68 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 69 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 70 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 2013 2014 2015 2016 2017 ## 65 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 66 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 67 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 68 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 69 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ## 70 &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; You can use ANY function in the apply() command, including those which have multiple inputs - in this case, the additional inputs are just input as additional inputs into the apply() function itself - and custom created functions like those we created in the previous week. As a final example, let us create a function and use it within apply() on the Mortality data: min_max &lt;- function(x, type){ ordered &lt;- sort(x) if(type == &quot;min&quot;){ return (ordered[1]) } else if (type == &quot;max&quot;){ return(ordered[length(ordered)]) } } apply(Mort_pension_2000[,-1], 1, min_max, type = &quot;min&quot;) ## 65 66 67 68 69 70 71 72 73 74 ## 0.01883 0.02048 0.02189 0.02463 0.02695 0.02853 0.03255 0.03683 0.04035 0.04411 ## 75 76 77 78 79 80 81 82 83 84 ## 0.04971 0.05459 0.05976 0.06545 0.07277 0.08134 0.08918 0.09897 0.11005 0.12088 ## 85 86 87 88 89 90 91 92 93 94 ## 0.13334 0.14586 0.15333 0.16419 0.17963 0.19210 0.20916 0.22064 0.25244 0.27843 ## 95 96 97 98 99 100 101 102 103 104 ## 0.29249 0.32928 0.34647 0.37149 0.39778 0.42035 0.46917 0.48428 0.49442 0.50242 ## 105 ## 0.55556 apply(Mort_pension_2000[,-1], 1, min_max, type = &quot;max&quot;) ## 65 66 67 68 69 70 71 72 73 74 ## 0.02785 0.03085 0.03358 0.03696 0.04059 0.04390 0.04872 0.05385 0.05899 0.06575 ## 75 76 77 78 79 80 81 82 83 84 ## 0.07002 0.07534 0.08223 0.08847 0.09495 0.10217 0.11028 0.12229 0.13242 0.14378 ## 85 86 87 88 89 90 91 92 93 94 ## 0.15974 0.17032 0.18645 0.19645 0.21615 0.23281 0.24830 0.27119 0.30073 0.32529 ## 95 96 97 98 99 100 101 102 103 104 ## 0.34906 0.37129 0.39790 0.43153 0.44902 0.49334 0.53085 0.55721 0.60396 0.62236 ## 105 ## 0.67361 There are some very subtle differences between lapply(), sapply() and vapply() that I will not go into here but please make sure to work through the DataCamp courses to understand these. For the sake of this course, the apply() function allows us to do what we want sufficiently! Feel free to now have a go at the final set of exercises below: I hope you enjoyed this small workshop on R Programming and feel more confident with the basics of what you can do in R. I strongly suggest you continuously test yourself in R and even make up your own problems/challenges, as physically programming is really the only way to remember and improve your programming skills. Also, please do not be afraid to search the web for tips and advice, I personally find this the simplest and quickest way to learn. I am always more than happy to help with any questions you may have, so do please not hesitate to contact me! 5.7 Exercises A traffic engineer is investigating the consistency and use of public buses in York. Based on previous data, she finds that the number of buses arriving each day fluctuates due to poor timetabling and assumes that the number of buses (arriving each day) is Poisson distributed with parameter \\(\\lambda = 10\\). Create a vector containing 30 simulated values from this distribution to represent a simulation of a months worth of observations. Based on the same data, it is assumed that the average number of people on each bus follows a binomial distribution with parameters \\(n = 60\\) and \\(p = 0.4\\). Create a second vector containing 30 simulated values which represents the average number of people on each bus per day. Finally, the average age of the passengers riding the buses on any given day is thought to be rounded gamma distributed with parameters \\(\\alpha = 250\\) and \\(\\beta = 5\\). Create a vector containing 30 simulated values to represent the average age of passengers on a given day. Using the vectors created above, create a data frame with 4 columns representing the days of the week (starting from Monday), the number of buses arriving per day, the average number of passengers per bus and the average age of passengers on that given day. Add a new column to the data which shows the average number of passengers each day. Using conditional row/column extraction and the apply() function, determine the mean and standard deviation for each of the variables within the week and at the weekend separately. Compare the results of weekday vs. weekend using a bar chart. [Hint: We have not spoken explicitly about how to use bar charts, so you will have to read up on these yourselves.] Import the ‘Stock Price’ data from the Excel file on the VLE and save it as a data frame. By creating a function and using apply(), add new columns to this data frame containing the relative returns of each stock and label the new columns appropriately. Using the relative returns calculated in Exercise 7., create a plot which compares the mean relative returns per year for each of the stocks. [Hint: You can extract the year from the date column of the data frame using the following code - format(date, format = \"\\%Y\").] Using the apply() function, calculate the standard deviations of the returns for the different stocks within each year. 5.8 DataCamp course(s) https://www.datacamp.com/courses/intermediate-r (Intermediate R Course) https://www.datacamp.com/learn/courses/intermediate-r-for-finance (Intermediate R for Finance Course) "],["additional-tips.html", "A Additional Tips Commenting Help", " A Additional Tips Commenting Imagine writing a 500 line R code which analyses financial and claim severity data for your company. Within this code, you have assigned a variety of variables, produced countless plots and created numerous different data frames containing the necessary information. Now imagine either of the following scenarios: You need to go back through the code to find a particular plot and/or function that computed a certain value of interest that lies somewhere in the middle of your code; You have been re-assigned to a different task and have to send your source code to another colleague to take over. In either case, you will encounter a major problem when it comes to going through lines upon lines of code to find what your looking for, or even remember what you have done. Therefore, to avoid this problem, we insist on the use of commenting when writing R script. To add comments into your script you can simply use the hash tag symbol #. R understands that anything on a line following the hash tag is only a comment and will not be executed when run into the console. For example, look at the following code: Figure A.1: Error when adding text to code line. As you can see from Figure:@ref{fig:comment1}, when we ran the line of code from the script into the console, R throws up an error. This is due to the fact that R is trying to understand the text following the curve() function as a command to be executed but cannot match it to any known functions and/or variables. On the other hand, if we add the commenting symbol #, look what happens: Figure A.2: Comment using hashtag symbol. In this case, R executed the initial command/function curve() but then did not consider anything after the hash tag as it knows it is simply a comment. This is a very helpful feature that we strongly recommend you use at all times and get into the habit of using early. It will save you a lot of time and hard work further down the line. Help The final feature we want to mention in this introductory chapter is the help functionality. Towards the start of this chapter, we discussed the ‘Help’ tab on the bottom right of the screen and briefly explained how it works. In summary, you can click the ‘Help’ tab and search for a particular function, e.g. plot(). Doing so will bring up an information page detailing the plot() function, its possible arguments and some worked examples: Figure A.3: Using the ‘Help’ tab for the plot() function. An alternative way to access this help page is to use the ? symbol within the script/console. For example, if you know the name of the function you want some more information about, e.g. plot(), instead of going into the ‘Help’ tab, you can simply ?plot() in your script then run it into the console or, equivalently, type it directly into the console itself. In either case you will produce the same screen as seen in Figure:A.3 above. Finally, if you do not know the function names itself you can conduct a broader search of a specific word using the double question mark symbol, i.e. ??. For example, assume you wanted to compute the variance but did not already know the associated function was var(). Then, you could type ??variance, which would bring up a list of information pages containing any relevance to variance and you can browse through these as you wish until you find an appropriate function: Figure A.4: Using the double question mark symbol for ‘Help’. Although these ‘Help’ tools will indeed prove very helpful throughout your programming journey, you cannot emphasise enough the power and ease of simply using a search engine to find answers. There are so many different packages, containing different functions, each of which has several arguments with a list of possible value, it is impossible to learn them. Therefore, browsing the internet to search for these functions and how bets to use them is another vital tool at your disposal. "],["cheat-sheets.html", "B Cheat Sheets R Cheat Sheets RMarkdown Cheat Sheets RMarkdown Guides", " B Cheat Sheets R Cheat Sheets RMarkdown Cheat Sheets RMarkdown Guides Learning how to create documents in RMarkdown for the first time can be quite daunting, especially in this module which requires extensive mathematical formulae, plots and code to be included. To help you with this, I have listed a number of very useful online guides that I use myself when creating RMarkdown documents (including these notes). Be aware that some of them contain alot of information so be careful to only read through the relevant sections: R Markdown: The Definitive Guide R Markdown Cookbook Authoring Books with R Markdown "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
