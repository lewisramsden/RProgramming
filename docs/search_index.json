[["index.html", "Introduction to R Programming - University of York Preface About This Course Schedule DataCamp", " Introduction to R Programming - University of York Dr. Lewis Ramsden Autumn Term (2022/23) Preface These lecture notes have been created as supplementary material for this course and are mostly built up from the R scripts seen in the workshops, as well as a few additional comments. At the end of each chapter, you will also find the exercise problems discussed in the workshop sessions; the solutions will be added as we progress through the course. These notes are a work in progress and as such, will be updated throughout the duration of the course, so please make sure to revisit them on a regular basis. If there is anything missing from these notes that you believe would be beneficial or if you notice any mistakes, please let me know so I can improve them as best I can. Remember, they are here for your benefit so it would be great to have your input too. About This Course This course is by no means exhaustive and is designed to introduce you to the basics of programming in R, improving your confidence with coding and signposting you to additional resources for you to further enhance your skills. The course is non-credit bearing and thus, there are no formal assessments for you to submit. However, at the end of each week/chapter there are a number of exercises for you to complete, which I strongly recommend you attempt. The best way to learn and improve you coding skills is by doing it yourself and learning how to overcome the obstacles/errors that you will inevitably encounter. Remember, do not be afraid to search the web for hints and ideas when programming, it is usually the most effective way to solve your problems, I have to do it on a daily basis! Schedule As this is a non-credit bearing course, the syllabus and schedule are flexible and can be delivered as we see fit. However, a rough schedule over the 6-week course is as follows: RStudio and R basics (Revision) Conditional statements and IF statements FOR/WHILE loops Functions Creating, importing and analysing data Creating documents in RMarkdown DataCamp In order to assist you in your journey to learning all about R and RStudio, this course is supplemented via an online interactive tutorial website known as DataCamp. In DataCamp, you will have access to hundreds of interactive courses for R (and other languages such as Pyton and SQL), each tailored to a different aspect of the fundamentals of R programming or an area of application. In general, only a few of these courses are free to use, with the remaining requiring a paid subscription for access. However, for those of you sitting the short course on `R programming’ you will have free access to the full library of courses for 6 months from the start of the course. Registration for this free access will be discussed in the lecture itself and is only available to those invited by the lecturer via an email link. To learn more about DataCamp and what it has to offer visit . As mentioned above, DataCamp will be used as a supplementary resource for this course and we strongly encourage you to use it. At the end of each chapter of these lecture notes, we will include links directing you to appropriate courses within DataCamp that we believe complement the material given. "],["rstudio-and-r-basics-revision.html", "Week1 RStudio and R Basics (Revision) 1.1 How to install R and RStudio 1.2 RStudio interface explained 1.3 Mathematical calculations 1.4 R script 1.5 Assigning variables 1.6 Vectors and Matrices 1.7 Plotting graphs 1.8 DataCamp Courses", " Week1 RStudio and R Basics (Revision) R is a language and programming environment for statistical computing and graphics (graphs and plots), which offers an ‘Open Source’ (freely available) alternative for implementation of the S language, which is the usual language of choice when it comes to statistical computing. In other words, R is a freely available software environment which runs on Windows, MacOS and LINUX, that allows the user to conduct mathematical calculations, data manipulation, statistical computations and create graphical output. RStudio is known as an integrated development environment (IDE) for R, which essentially provides much more user friendly access to R and its features. The figures below show the two environments separately. The first is the original R environment and the second is RStudio. Even from these simple graphics, you can see that RStudio provides a much more detailed user face, with a number of different ‘panels’ (discussed in more details later) for a range of different commands. Figure 1.1: R Environment. Figure 1.2: RStudio IDE. 1.1 How to install R and RStudio Installing R and RStudio has to be done in two separate steps: Firstly, we need to install the original R software for your specific operating system (Windows, Mac or LINUX) from https://cran.ma.imperial.ac.uk/. Once this is installed, you are able to open R and you should be met with a screen similar to the left hand side in Figure:1.1, above. At this point, you are now able to use R and all its features completely. However, as mentioned in the previous section, it is usually preferable to work with RStudio due to its user friendly interface. To download the free version of RStudio, visit [https://rstudio.com/products/rstudio/download/] and download ‘RStudio Desktop (Free)’. Once downloaded, you will be able to open RStudio and should see a similar screen to that of Figure:1.2. Keep in mind that the image(s) above may be running older versions than the one you are using. Once you have downloaded RStudio, I recommend you only ever use R through this platform, so there is no need to open the original R software. Note that in order to use R through the RStudio environment, you must first download the original R software. However, you can use R without downloading RStudio but I do not recommend this! If you are using a university computer, you do not have to worry about the steps above as R and RStudio are already installed and can be found within the list of installed in programmes. 1.2 RStudio interface explained When you open RStudio, you will notice that the environment has a number of different ‘panels’. You may find that your environment looks slightly different to the one in the figure above and may only have one larger panel on the left hand side rather than two separate ones. This difference will be explained later. To avoid confusion, your screen should look like the figure given below. Figure 1.3: Orginal RStudio View. Let us discuss each of the panels and some of their associated tabs, in a little more detail: Console (Left panel) - The console is the panel you will interact with the most, as this is where you can type commands which can be ‘Run’ to produce some output. Environment (Top panel, Tab 1) - The environment tab lists all active objects that have been ‘assigned’ (see below) and stored for later use. This is especially helpful when writing a long programme for which many variables need to be stored, as it allows you to refer back to previously defined objects. History (Top right panel, Tab 2) - The history tab shows a list of all commands that have been run within the console so far. Again, this can prove useful when writing long programmes which may require re-use of certain commands or to double check what has already been run. Files (Bottom right panel, Tab 1) - The file tab shows the folder of your ‘Working Directory’. That is, the folder in which R is directed to look for data sets etc. This tab looks similar to the equivalent folder in your PC/Mac folder window. Plots (Bottom right panel, Tab 2) - The plots tabs allows you to view all of the graphs/plots you have created within that session. This proves helpful when you want to compare a number of plots. Packages (Bottom right panel, Tab 3) - The packages tab provides access to a list of ‘Packages’ or ‘Add-ons’ needed to run certain functions. When RStudio is first started up, it will only have access to its basic packages which contain fundamental functions and tools. In order to conduct more sophisticated analysis or calculations it is usually required for you to install an extra package which contains these tools. Help (Bottom right panel, Tab 4) - The help tab can be used to find additional information about certain functions, tools or commands within RStudio. You will find this to be a very important part of your programming experience and will be used constantly. We will discuss later on how to access help via a shortcut through the console. 1.3 Mathematical calculations Now that we understand a little more about the setup of R and RStudio, we want to discuss what we can actually do in R. As previously mentioned, R is most notably used to conduct mathematical calculations, data manipulation, statistical computations and create graphical output but let us discuss each of these in a little more detail and give some practical examples you can try for yourself. In its most basic form, R can be used as a large scale calculator. In contrast to an actual calculator, it can perform a variety of calculations quickly and easily, which would otherwise take a great deal of time, e.g. series summations and matrix multiplcation. In fact, there are many calculations that can be performed in R which would not be possible even with a scientific calculator. 1.3.1 Basic numerical calculations If you simply type 5*3 into the ‘console’ (see above) and press enter you should receive the solution as an output which again appears in the console below your input: Figure 1.4: Basic Multiplication. In a similar way, you can perform a variety of other basic mathematical calculations: 7+3 ## [1] 10 9/3 ## [1] 3 15-2 ## [1] 13 6^3 ## [1] 216 sqrt(100) ## [1] 10 Notice that some calculations, like the square root above, require knowledge of certain ‘functions’ e.g. sqrt() of which there exists hundreds in R’s base packages for you to use. Knowing what each of them are and how they work is part of the programming experience and will take time. We will talk more about ‘functions’, and how you can create your own in a later chapter. Some other useful examples of pre-defined variables and functions are pi, exp() and log() which allow use of \\(\\pi\\), \\(e^x\\), \\(\\ln(x)\\) in calculations, respectively. For example, if we wanted to calculate \\(e^{\\ln(\\pi)}\\): exp(log(pi)) ## [1] 3.141593 1.3.2 More complicated calculations Imagine that you want to find the sum of all the integers from \\(1\\) to \\(1000\\). To do this on a basic calculator would require you to physically type each integer in turn, adding them as you go along (assuming you do not know the series summation formula). However, in R, you can compute this with one simple function, i.e. sum() with argument 1:1000, which creates the sequence of numbers from \\(1\\) to \\(1000\\). To see this in action before performing this particular calculation, type 1:10 in the console and press enter: 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 As you can see, the output is the required sequence of integers from \\(1\\) to \\(10\\). Returning to our original summation calculation, by inputting sum(1:1000) and pressing enter, R will first create the sequence from \\(1\\) to \\(1000\\) in a similar to above, then sum all of these values: sum(1:1000) ## [1] 500500 Before we move on to discuss more advanced calculations that can be handled with R, let us take a moment to highlight the disadvantages of writing code directly in the console itself and introduce something known as an ‘R script’. In addition, we will also discuss how we can ‘assign’ values to variables which we can then recall at any point for use in calculation. 1.4 R script So far, we have executed each line of code directly into the console itself, one line at a time, pressing enter and producing output each time. Although this works and produces the necessary output, it has numerous disadvantages. Firstly, if you make a mistake in the line of code, you cannot simply amend it and re-run it. Instead, you have to ‘re-type’ the code again on a new line without the mistake. Secondly, it requires you to execute every line of code once you have completed it. If you are writing a programme with hundreds of lines, this will become very frustrating especially if something goes wrong half way through and you have to re-write the entire code again. Finally, you cannot easily save your written code within the console to be re-opened and continued at a later date. In order to avoid all of these problems, from now on we type all of our code into an ‘R script’, from which we can execute the code into the console. To open an R script, click the icon which looks like a blank piece of paper with the small green plus sign in the top right hand corner of your screen, then click R Script: Figure 1.5: Opening an R script. At this point, a new (blank) panel should open in the top left of your screen. This panel will now become the panel which you type all of your code (you no longer type into the console panel). Once you have typed your line of code, you can execute it (run it into the console) by simply highlighting the relevant code then clicking on the Run button as seen in Figure:@ref{fig:Script2} below. Figure 1.6: Executing code from a script in R. Note you can also simply go to the start or end of the line and press Run, you do not actually need to highlight it. This is only necessary if you want to Run more than one line at a time. By executing code from the script, you avoid all the previously discussed problems. That is, if you have a made a mistake in your code, which you will notice once executed, you now simply amend this in the script and re-run it which is much simpler than re-writing the entire code. Moreover, you do not actually have to execute any code until you desire. Think of the script as a notebook which you can keep typing in and can run code from whenever you wish. Finally, and most importantly, you can save the script file and re-open this at a later date to continue working on and/or send to a colleague. You do this in the normal way as if saving a standard document in Word or other software. 1.5 Assigning variables Recall the earlier example where we calculated the sum of values from \\(1\\) to \\(1000\\). Although relatively straight forward, typing this code out each time we would like to use the result becomes tedious and is, in fact, unnecessary in R. Instead, R allows us to ‘assign’ a value, vector, matrix, function etc., to a variable so we can recall that particular quantity at any point by simply typing the variable itself. For example, instead of repeatedly typing sum(1:1000) or the result itself {r} sum(1:1000), we could ‘assigned’ this to the variable \\(x\\) using the ‘assignment operator’ &lt;-, which allowed us to reuse the value later on by simply typing \\(x\\): x &lt;- sum(1:1000) x ## [1] 500500 Note, however, that when we used the assignment operator it did not print the output itself, which would have happened if we had simply ran the code without assignment. This is the reason we then typed the variable \\(x\\) in the next line of the console, as this will now print as output whatever quantity is saved to the variable \\(x\\), in this case the sum of values from \\(1\\) to \\(1000\\). If you would actualy like to do both things at the same time, i.e, assign and print the output, you should put the assignment code in brackets: (x &lt;- sum(1:1000)) ## [1] 500500 x ## [1] 500500 Finally, when a variable is assigned, the variable name and the type of quantity that has been assigned to it, will be stored in the ‘environment’ tab/panel. In this case, the variable \\(x\\) was assigned and the quantity assigned to them takes the form of a ‘numeric’ (num) value. 1.6 Vectors and Matrices As we have already briefly seen within the summation calculations above, R can also easily create collections of values in a single object, known as a vector, which can then be used in a variety of calculations, including vector and/or matrix type calculations themselves. 1.6.1 Vectors There are in fact a number of different ways to create ‘vectors’ of values in R, so let us discuss some of the most common. The most general way is to use the ‘combine’ or ‘concatenate’ function c(). This function combines a series of individual values and then glues them together to form a vector c(1, 2, 5, 9, 15) ## [1] 1 2 5 9 15 c(-3, 3, -1, 0, 10, 5, 2, -100, 25) ## [1] -3 3 -1 0 10 5 2 -100 25 Although this is the most general method, it does require you to type out each value individually, not ideal if you want a vector containing \\(1000+\\) values. We have already seen another example of how to create a vector using the semi-colon syntax 1:1000. However, this is quite specific and only works for creating vectors which form a series of increasing/decreasing values: 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 20:5 ## [1] 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 The more general version of this method is to create a ‘sequence’ of values with an initial starting point, an end value and specifying the increments between the values: seq(from=5, to=50, by = 5) ## [1] 5 10 15 20 25 30 35 40 45 50 The third way requires a little more thought and experience but will become second nature once you get going. It relies on you understanding how R deals with vectors in calculations, which you can then take advantage of (see below). 1.6.2 Vector calculations Using vectors in calculations is just as simple as with scalar values, but will not necessarily produce the output you might first expect in some cases. Let us start by looking at some simply addition and subtraction of vectors which we assign as different variables: a &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) b &lt;- 11:20 a+b ## [1] 12 14 16 18 20 22 24 26 28 30 b-a ## [1] 10 10 10 10 10 10 10 10 10 10 Notice that the calculations in the above have been done ‘element-wise’. This is a very important observation as it is a characteristic of R vector calculations that will come in handy throughout your coding life and should be utilised as much as possible. Let us look at a few more examples: a*b ## [1] 11 24 39 56 75 96 119 144 171 200 b/a ## [1] 11.000000 6.000000 4.333333 3.500000 3.000000 2.666667 2.428571 ## [8] 2.250000 2.111111 2.000000 a^2 ## [1] 1 4 9 16 25 36 49 64 81 100 a^b ## [1] 1.000000e+00 4.096000e+03 1.594323e+06 2.684355e+08 3.051758e+10 ## [6] 2.821110e+12 2.326305e+14 1.801440e+16 1.350852e+18 1.000000e+20 Once again, these have all been calculated element-wise! What happens if the vectors are not of the same length? In this case, R will automatically loop around the shorter vector and start using the values again from the start until it has used enough to match the length of the second vector. Let us take a look at a quick example to see how this works in practice: vec1 &lt;- c(1,2,3,4) vec2 &lt;- c(1,2,3,4,5,6,7) length(vec1) ## [1] 4 length(vec2) ## [1] 7 vec1 + vec2 ## Warning in vec1 + vec2: longer object length is not a multiple of shorter object ## length ## [1] 2 4 6 8 6 8 10 This is a perfect example of why you need to be very careful when writing code. Just because you have (possibly) made a mistake, R will not always realise you have and execute a calculation anyway. 1.6.3 Vector strings R is not all about numerical values. As it is a tool for statistical analysis, data can come in many shapes and sizes including words (known in R as character strings) or logical values, i.e, TRUE or FALSE. We will talk more about the latter values in the next few weeks but it is worth discussing ‘string’ here. A ‘character string’ is simply a word or combination of letters that you would like R to understand as such. To create or include a string, you need to use quotation marks: &quot;Hello World&quot; ## [1] &quot;Hello World&quot; Once you put quotation marks around something, R automatically recognises this as a string and will not try to perform and type of operation to this. This is even possible with numerical values: &quot;10 is a numerical value&quot; ## [1] &quot;10 is a numerical value&quot; As a small example, try adding together the strings “10” and “11” in R. Notice that because we have defined the values as strings, R cannot perform addition with them: str(&quot;10&quot;) ## chr &quot;10&quot; str(10) ## num 10 In exactly the same way as we have seen above, it is possible to create vectors of strings. This is very helpful when you want to name a bunch of objects, rows/columns in data tables or when they represent data points themselves, e.g., geographical regions etc. c(&quot;York&quot;, &quot;London&quot;, &quot;Liverpool&quot;, &quot;Birmingham&quot;) ## [1] &quot;York&quot; &quot;London&quot; &quot;Liverpool&quot; &quot;Birmingham&quot; 1.6.4 Vector extraction One final tool of note for vectors is the method of extracting certain values. For example, let us again consider the vector of values from \\(1\\) to \\(1000\\). Now assume that you want to ‘extract’ the first 10 values from this vector, i.e. the values \\(1\\) to \\(10\\). To extract values from a vector, you can use square brackets [] immediately after the brackets to inform R of which elements you want to extract: x &lt;- 1:1000 x[1:10] # Note that this extracts the first 10 elements, not the elements with value 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 y &lt;- seq(from = 10, to = 20, by = 0.5) y[1:10] ## [1] 10.0 10.5 11.0 11.5 12.0 12.5 13.0 13.5 14.0 14.5 z &lt;- y[c(1,3,5,7,9)] # This extracts the 1st, 3rd, 5th, 7th and 9th elements z ## [1] 10 11 12 13 14 y[-(1:10)] # The negative sign means extract everything except the specified elements ## [1] 15.0 15.5 16.0 16.5 17.0 17.5 18.0 18.5 19.0 19.5 20.0 Notice the comments in the above code? This can be done using the hashtag symbol and is a habit I would strongly recommend you start to implement from the off. I have given more information about this in the supplementary chapter (Additional Tips) at the end of these notes. To give you a little more context to how/where this might be helpful, take a look at the following simple example about with respect to heights of individuals in a given classroom: Example 1.1 Assume that the height (in cm) of a 80 individuals in a given classroom were measured and recorded in the variable height_data given below: height_data ## [1] 152.1827 173.5075 194.9404 171.1608 159.7870 175.1145 184.8450 189.0928 ## [9] 163.4861 195.0474 173.8707 177.8055 179.6013 119.4621 189.8541 179.8273 ## [17] 134.9761 179.7656 190.8554 156.6397 174.8319 159.5026 152.0133 165.2896 ## [25] 182.6421 197.7247 171.6904 163.5890 161.5600 165.6047 187.4742 180.9670 ## [33] 176.5923 155.1342 187.9515 167.1493 177.3711 147.0276 170.2263 157.7253 ## [41] 186.8688 183.4823 169.3215 179.3579 170.0649 166.1745 165.1587 163.0867 ## [49] 182.3949 179.4634 181.5799 177.6766 151.8770 158.3695 167.2752 164.9826 ## [57] 146.9665 177.0145 161.1040 185.3195 190.4660 169.7135 170.5965 168.5848 ## [65] 163.7571 175.4193 180.7915 183.2241 168.6543 176.5709 158.5718 175.4497 ## [73] 169.4785 174.9124 168.3354 141.6401 173.0320 147.7596 177.1718 173.6509 Now assume that we wanted to find out the average height of the 20 smallest individuals in the classroom: (height_sorted &lt;- sort(height_data)) ## [1] 119.4621 134.9761 141.6401 146.9665 147.0276 147.7596 151.8770 152.0133 ## [9] 152.1827 155.1342 156.6397 157.7253 158.3695 158.5718 159.5026 159.7870 ## [17] 161.1040 161.5600 163.0867 163.4861 163.5890 163.7571 164.9826 165.1587 ## [25] 165.2896 165.6047 166.1745 167.1493 167.2752 168.3354 168.5848 168.6543 ## [33] 169.3215 169.4785 169.7135 170.0649 170.2263 170.5965 171.1608 171.6904 ## [41] 173.0320 173.5075 173.6509 173.8707 174.8319 174.9124 175.1145 175.4193 ## [49] 175.4497 176.5709 176.5923 177.0145 177.1718 177.3711 177.6766 177.8055 ## [57] 179.3579 179.4634 179.6013 179.7656 179.8273 180.7915 180.9670 181.5799 ## [65] 182.3949 182.6421 183.2241 183.4823 184.8450 185.3195 186.8688 187.4742 ## [73] 187.9515 189.0928 189.8541 190.4660 190.8554 194.9404 195.0474 197.7247 smallest.20 &lt;- height_sorted[1:20] mean(smallest.20) ## [1] 152.4436 1.6.5 Exercises In R, create two vectors containing the numbers (5, 6, 7, 8) and (2, 3, 4). Assign these vectors to the variables u and v respectively. Without using R, write down or think about what you expect the following results to produce: add u and v subtract v from u multiply u by v divide u by v raise u to the power of v Using R, check if your initial thoughts were correct. Create the vector of values \\((1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5)\\) using the following two methods: Using the seq() function Using only the semi-colon syntax and element-wise calculations. Use R to create a vector containing all the square numbers from 1 up to and including 10,000 (\\(100^2\\)). The vectors LETTERS and letters are already pre-built into R’s base-package and contain the capital and lower-case versions of the letters from the English alphabet (Try it by simply running either LETTERS or letters into R). Create a vector containing the first 10 letters of the English alphabet in Capitals. Now, using your solution from the previous part, create a new vector of the form: \\[\\begin{equation*} (A, A, A, B, B, B, C, C, C, \\ldots, J, J, J). \\end{equation*}\\] [Hint: Try looking into the rep() function and how it works] 1.6.6 Matrices In the previous section, we discussed how to create vectors of values. However, R can just as easily deal with matrices and matrix calculations; a life-saver compared to doing them by hand as you may have had to do so far in other modules. As with vectors, there are actually a number of different ways to create matrices in R, but let us begin by looking at the matrix() function and using the ‘Help’ command, via the question mark symbol, i.e., ?matrix() (alternatively via the help tab) for more information. Doing so shows that the general form of the matrix() function is given by matrix(data = , nrow = , ncol = , byrow = , dimnames = ) where each of the arguments are defined as follows: data - This is a vector of data that is used to create the elements of the matrix itself nrow - This specifies the number of rows desired for the matrix ncol - This specifies the number of columns desired for the matrix. byrow - This argument instructs R on how to fill the matrix using the data vector. If it takes the value of TRUE, then the elements will be filled row-wise, i.e. will first fill all the first row, then move down to second row etc, and if FALSE, the vice-versa. dimnames - This argument allows you to assign names to the rows and columns of the matrix. Note that if either nrow or ncol is not given, then R will try to guess the required value(s) and will fill any unspecified elements by repeating the original data vector until filled. Example 1.2 Consider the following two matrices \\[\\begin{equation*} A = \\left( \\begin{array}{cc} 3 &amp; 4 \\\\ 6 &amp; 2 \\end{array} \\right) \\quad \\text{and} \\quad B = \\left( \\begin{array}{cc} 1 &amp; 5 \\\\ 4 &amp; 6 \\end{array} \\right). \\end{equation*}\\] These can created in R using the matrix() function as follows: (A &lt;- matrix(c(3,6,4,2), nrow = 2, ncol = 2, byrow = TRUE)) ## [,1] [,2] ## [1,] 3 6 ## [2,] 4 2 (B &lt;- matrix(c(1,4,5,6), nrow = 2, ncol = 2, byrow = TRUE)) ## [,1] [,2] ## [1,] 1 4 ## [2,] 5 6 1.6.7 Matrix Calculations Now that you have your matrices created and assigned as variables \\(A\\) and \\(B\\), you can use them in calculations: A+B ## [,1] [,2] ## [1,] 4 10 ## [2,] 9 8 B-A ## [,1] [,2] ## [1,] -2 -2 ## [2,] 1 4 A*B ## [,1] [,2] ## [1,] 3 24 ## [2,] 20 12 A/B ## [,1] [,2] ## [1,] 3.0 1.5000000 ## [2,] 0.8 0.3333333 ** BE CAREFUL!** Notice that all the calculations have been done element-wise again. As with the vectors, this turns out to be a very helpful tool within R although it might not appear so just now. If you want to apply ‘matrix-multiplication’ you have to use a slightly different command: A%*%B ## [,1] [,2] ## [1,] 33 48 ## [2,] 14 28 1.6.8 Matrix operations There are, of course, an array of other calculations you may apply when working with matrices e.g, determinant, inverse, transpose etc. Rather than showing each of these in turn, in this section we simply provide a table of the different matrix/vector operations that can be used in R, with a brief description of what each of them are used for. We suggest that you try these out for yourself in order to familiarise yourself and understand how they work and don’t forget to use the ‘Help’ function if you’re unsure. Once you have mastered these operations, have a go at the exercises in the next section. In the following table, A and B denote matrices, whilst x and b denote vectors: Operation Description A + B Element-wise sum A - B Element-wise subtraction A * B Element-wise multiplication A %*% B Matrix multiplication t(A) Transpose diag(x) Creates diagonal matrix with elements of x on the main diagonal diag(A) Returns a vector containing the elements of the main diagonal of A diag(k) If k is a scalar, this creates a \\((k x k)\\) identity matrix solve(A) Inverse of A where A is a square matrix solve(A, b) Solves for vector x in the equation \\(A\\vec{x}\\vec{b}\\) (i.e. \\(\\vec{x} = A^{-1}\\vec{b}\\)) cbind(A,B,...) Combines matrices(vectors) horizontally and returns a matrix rbind(A,B,...) Combines matrices(vectors) vertically and returns a matrix rowMeans(A) Returns vector of individual row means rowSums(A) Returns vector of individual row sums colMeans(A) Returns vector of individual column means colSums(A) Returns vector of individual column sums ** Recall that vectors are just particular cases of matrices with either one row or one column. Therefore, it is no surprise that you can create a vector using the matrix function. To do this, simply set the nrow or ncol argument equal to 1, depending on format of vector you want (row or column vector).** The only slight restriction to simply using the c() function, is that R will always saves the vector as a column vector. We point out here that this might not be so clear when you first define the vector in R, as the output given in the console looks like the form of a row vector. To overcome this, you can simply turn the column vector (default when using combine function in R) into a row vector by performing the transpose (see table above) of the original vector. 1.6.9 Matrix extraction In a similar way to how you we can extract values from vectors, we can extract values from matrices, this is also done with the square brackets [], however it now takes two different arguments, one for the specified row(s) and the other for the column(s) which you would like to extract. A ## [,1] [,2] ## [1,] 3 6 ## [2,] 4 2 A[1,1] ## [1] 3 A[2,1] ## [1] 4 A[c(1,2), 1] ## [1] 3 4 A[,1] # The blank space mean every row ## [1] 3 4 1.6.10 Exercises Using R, create the following matrices and vectors \\[ A=\\left[ \\begin{array}{ccc} 1 &amp; 4 &amp; 7 \\\\ 2 &amp; 5 &amp; 8 \\\\ 3 &amp; 6 &amp; 8 \\end{array}\\right] \\qquad B=\\left[ \\begin{array}{ccc} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 8 \\end{array}\\right] \\qquad D=\\left[ \\begin{array}{cc} 1 &amp; 3 \\\\ 4 &amp; 6 \\\\ 7 &amp; 9 \\end{array}\\right] \\qquad \\vec{b}=\\left[ \\begin{array}{c} 3 \\\\ 6 \\\\ 9 \\end{array}\\right] \\] Using the objects defined above, perform the following operations and check if the result is what you would expect: \\(A + B\\) element-wise sum \\(A \\times B\\) element-wise multiplication \\(A \\times B\\) matrix multiplication \\(B \\times D\\) matrix multiplication \\(B \\times \\vec{b}\\) matrix multiplication Compute the transpose of matrix A and of matrix D. Create a matrix with the elements 1, 2, 3, 4 in the main diagonal and zeros in the off diagonal elements. Define a vector which consists of elements from the main diagonal of matrix B. Build an identity matrix with dimension 10. Compute the inverse of matrix A. Check if \\(A \\times A^{-1}=I_3\\). Find the solution \\(\\vec{x} = (x_1, x_2, x_3)^\\top\\), where \\[ \\left\\{ \\begin{array}{ccl} 6.5 &amp;=&amp; x_1 + x_2 + x_3 \\\\ 9 &amp;=&amp; 0.5 x_1 + 2 x_2 + x_3\\\\ 11 &amp;=&amp; 3 x_1 + x_2 + 2 x_3 \\end{array}\\right. \\] Combine the matrices A and D, horizontally. Combine the matrix A and the transpose of vector b vertically. Compute the mean for each row of matrix A. Do the same for each column of matrix A. Compute the sum for each row of matrix B. Do the same for each column of matrix B. 1.7 Plotting graphs One of R’s major strengths is the ease with which well-designed, publication-quality plots can be produced and can include mathematical symbols and formulae where needed. The basic plotting function in R, located in its basic packages, is the so-called plot() function. In its simplest form, the plot() function allows you to plot two variables, say \\(X\\) and \\(Y\\), against each other as a scatter plot. For example, imagine we wanted to plot the following points \\((x,y)\\): \\[\\begin{equation*} (0,0), \\,(1,2),\\, (2,2),\\, (3, 5),\\, (4, 4),\\, (6, 8), \\end{equation*}\\] as a scatter plot. Then, we could do this as follows: X &lt;- c(0,1,2,3,4,6) Y &lt;- c(0,2,2,5,4,8) plot(X, Y) From the R plot above, you can see that R has simply taken the two vectors (X and Y) and plotted the values pairwise (as required) to create a basic scatter plot. That being said, the plot itself looks very basic and is not particularly aesthetic. This is because we have used the very basic structure for the plot() function. However, with a little alteration, this can be adapted to create something a little more exciting: Figure 1.7: Example of Plot using plot(). The example above provides a small insight into the very basics of the plotting tools available in R. Let us know look at this function a little more closely. Using ?plot() we find that the plot() function has the general form: plot(x, y, main = , xlab = , ylab= , type= , pch= , col= , cex= , bty = ) where each of the arguments are defined as follows: x - Points to be plotted along the x-axis y - Corresponding points to plotted against the y-axis. Note that these values match-up element-wise the x values to create co-ordinate pairs \\((x,y)\\) main - Takes a character string and gives the plot a main title xlab - Takes a character string and labels the x-axis ylab - Takes a character string and labels the y-axis type - Takes a number of different character strings to define the type of plot desired, i.e. line, point etc. (see table below) pch` - Takes a values and defines the shape each point should take, i.e. circle, square etc. (see table below) col - Sets the colours of the points/lines in the plot cex - Takes a value and defines the size of the points bty - Takes a character string and sets the type of axes for the plot A number of other arguments can be used to change the layout and format of the plot but will not be discussed here. If you are interested, search for the par() function in the ‘Help’ tab. Example 1.3 Consider the followings prices on the equity index S&amp;P500 for the last weeks: day &lt;- c(1:10) price &lt;- c(1979,1987,1951,1923,1920,1884,1881,1931,1932,1938) Using a combination of all the arguments in the above list, we can produce the following plots: plot(day, price) plot(day, price, main=&quot;S&amp;P 500&quot;, xlab=&quot;Day&quot;, ylab=&quot;Closing Price&quot;, pch=19, col=3, type=&quot;p&quot;) plot(day, price, main=&quot;S&amp;P 500&quot;, xlab=&quot;Day&quot;, ylab=&quot;Closing Price (£)&quot;, pch=&quot;+&quot;, col=2, type=&quot;b&quot;, bty=&quot;L&quot;) The table below gives a non-exhaustive list of some of the different options you can make when choosing arguments for your plots. To find more, search online: type Description “p” points “l” lines “b” both “c” lines part alone of “b” “h” histogram like vertical lines “s” stair steps pch Description 0 square 1 circle 2 triangle 4 plus 5 cross 6 diamond bty Description “o” full box “n” no axes “7” top and right axes “L” bottom and left axes “C” top, bottom and right axes “U” bottom, left and right axes 1.7.1 Adding to plots (lines, points etc.) There will be many occasions where you wish to add another set of points, or some other plot to your original. This is usually the case when comparing two different sets of data or, for example, when wanting to draw a regression line through your data points. Again, R has a variety of pre-defined functions that allow you to do this with ease. However, those who are new to R will make the common mistake of trying to add a second plot to the original by using the plot() function for a second time. The plot() function (seen above) does not simply plot points or lines. The source code underpinning the plot() function first instructs R to create a separate window/panel, create a set of axes (designed based on the choice of bty as argument) create some axis labels then, finally, add the points or lines. Therefore, by executing the function again, you will find you produce a completely new plot rather than adding to the previous. In order to add more graphics to the original plot, we instead have to use the functions points(), lines() and abline(). The points() and lines() functions work in a very similar to that of the plot() function in the sense that they take similar arguments. The only difference now, is that the function does not first create axes etc., but will simply plot the points/lines onto the most recent plot that was created. Note here that since the points() function can take type as an argument, it is actually possible to create line plots with this function (type = \"l\") instead of using the lines function. Remember, there are many ways to create the same output in R, it is down to you to decide which you prefer to use. Let’s add to the S&amp;P example above, by also adding the FTSE prices during the same time period: plot(day, price, main=&quot;S&amp;P 500&quot;, xlab=&quot;Day&quot;, ylab=&quot;Closing Price (£)&quot;, pch=&quot;+&quot;, col=2, type=&quot;b&quot;, bty=&quot;L&quot;) ftse &lt;- c(1960, 1960, 1950, 1931, 1918, 1890, 1900, 1910, 1905, 1935) points(day, ftse, col = &quot;blue&quot;, type=&quot;b&quot;, pch=&quot;+&quot;) The abline() function, on the other hand, is slightly different. This function is used simply to create straight lines on your current plot. Using ?abline() we see it takes the form abline(a, b, h= , v = , ... ) The arguments in this case are no longer data points like in the previous plotting functions but correspond to co-ordinates: a - The value of the intercept for the straight line b - The value for the gradient of the straight line h - The y co-ordinate (intercept) for a horizontal line v - The x co-ordinate for the vertical line. In addition to these arguments, you can also format the line type, width etc., but we will not discuss these again as they are simply aesthetic parameters which you can easily search for online. plot(1:10, (1:10)^2, main=&quot;Abline example&quot;, ylab=&quot;y&quot;, xlab=&quot;x&quot;, type=&quot;b&quot;, pch=19,) plot(1:10, (1:10)^2, main=&quot;Abline example&quot;, ylab=&quot;y&quot;, xlab=&quot;x&quot;, type=&quot;b&quot;, pch=19,) abline(a=0,b=3, col = &quot;red&quot;) abline(a=0, b=6, col = &quot;blue&quot;) abline(h=60, lty = 2) abline(v=6, lty = 3, lwd = 2, col = &quot;orange&quot;) In addition to the plot function and its variety of options, we can implement other plotting functions such as hist() and boxplot(), which will be discussed in a later chapter in more details, to produce the best graphical representation of your data possible. Finally, although we discuss graphics using the basic plotting commands here, it is worth pointing out the popularity of a completely different package and set of functions, known as ggplot2, which makes the plotting experience even more exciting. We will not actually discuss this in these lecture notes, however, it is strongly advised that you familiarise yourself with this package and its associated functions using DataCamp. In fact, there are three excellent courses devoted to the subject which will be linked at the end of these notes. 1.7.2 Exercises Consider the following formula to calculate the number of mortgage payment terms required to pay off a mortgage as a function of the principle amount (\\(P\\)), the monthly repayments (\\(M\\)) and the monthly interest (\\(i\\)): \\[\\begin{equation*} n = \\frac{\\ln\\left(\\frac{i}{\\frac{M}{P}-i}+1 \\right)}{\\ln(1+i)} \\end{equation*}\\] Using R, solve the following problems: Calculate the number of payments \\(n\\) for a mortgage with principle balance of £200,000, monthly interest rate of \\(0.5\\%\\) and monthly payments of £2000. Now construct a vector, named \\(n\\), of length 6 with the results of this calculation (in years) for a series of monthly payment amounts: \\((2000, 1800, 1600, 1200, 1000)\\). Does the last value of \\(n\\) surprise you? Can you explain it? Create a line plot for the values of \\(n\\) (excluding the last) against the different payment amounts. Give the plot a title, appropriate label names and make the points appear in blue. 1.8 DataCamp Courses https://www.datacamp.com/courses/free-introduction-to-r (R Basics - Recommended) https://www.datacamp.com/courses/data-visualization-in-r (Plotting Data) https://www.datacamp.com/courses/data-visualization-with-ggplot2-1 (Plotting Data using ggplot - Recommended) https://www.datacamp.com/courses/data-visualization-with-ggplot2-2 https://www.datacamp.com/courses/data-visualization-with-ggplot2-part-3 "],["conditionals-and-if-statements.html", "Week2 Conditionals and IF Statements 2.1 Relational Operators 2.2 Logical Operators 2.3 IF Statements 2.4 Exercises", " Week2 Conditionals and IF Statements In R, conditional statements or arguments are used to compare or analyse values/data based on certain conditions. In general, this is done with the use of ‘relational operators’ (=, &gt;, &lt;, &gt;=, &lt;=, !=) and ‘logical operators’ (OR, AND, AND/OR). 2.1 Relational Operators The most basic of the ‘relational operators’ is the equality operator (==), which can be used to check if two objects (values, vectors, matrices etc.) are equal: 4 == 3+1 ## [1] TRUE 5^2 == 25 ## [1] TRUE 8 %% 5 == 3 # The double percentage sign here resembles modulo arithmetic, i.e. 8 mod 5 ## [1] TRUE This can also be performed on vectors on an element by element basis (as usual): 1:10 == c(1,2,3,4,5,6,7,8,9,10) ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE 1:10 == c(0,2,3,4,5,6,7,8,9,10) ## [1] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE Unsurprisingly, it also works on matrices on an element by element basis as well: matrix(5, nrow = 3, ncol = 3) ## [,1] [,2] [,3] ## [1,] 5 5 5 ## [2,] 5 5 5 ## [3,] 5 5 5 matrix(1:9, nrow = 3) == matrix(5, nrow = 3, ncol = 3) ## [,1] [,2] [,3] ## [1,] FALSE FALSE FALSE ## [2,] FALSE TRUE FALSE ## [3,] FALSE FALSE FALSE diag(5, nrow = 3, ncol = 3) ## [,1] [,2] [,3] ## [1,] 5 0 0 ## [2,] 0 5 0 ## [3,] 0 0 5 diag(5, nrow = 3, ncol = 3) == 5 * diag(1, nrow =3) ## [,1] [,2] [,3] ## [1,] TRUE TRUE TRUE ## [2,] TRUE TRUE TRUE ## [3,] TRUE TRUE TRUE Notice that this equality operator uses a double equal sign (==) rather than a single =. This is due to the fact the single equality sign is already used for assignments (similar to &lt;-). This can be confusing, can easily cause errors and is the main reason I always suggest using &lt;- for variable assignment. Conversely, you can use the not equal operator (!=) in a similar way 3 != 5 ## [1] TRUE seq(1, 10, by = 1) != 1:10 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE Note - In general, the (!) symbol negates any type of relational operator or Boolean value in R, e.g. !TRUE ## [1] FALSE !FALSE ## [1] TRUE In a similar way, you should easily be able to understand how the rest of the relational operators work, i.e. (&lt;, &gt;, &lt;=, &gt;=). In the following example(s), I will introduce you to one of the many pre-programmed data sets that form part of the base package data sets, i.e, mtcars; we will discuss data sets in more details in the next few weeks. mtcars mpg cyl disp hp drat wt qsec vs am gear carb Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 Exercise 2.1 Assume we want to analyse the hp (horsepower) variable (column) only. Based on what we discussed last week regarding vector/matrix extraction, how can we extract hp data only? Solution mtcars[,4] ## [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 ## [20] 65 97 150 150 245 175 66 91 113 264 175 335 109 An alternative method of extraction for data sets (data frames) is to use the $ extraction command based on the column/variable name. Note that this only works on data frames and not general matrices, whereas the square bracet extraction works for both: (HP &lt;- mtcars$hp) ## [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 ## [20] 65 97 150 150 245 175 66 91 113 264 175 335 109 HP &gt; 200 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE TRUE ## [25] FALSE FALSE FALSE FALSE TRUE FALSE TRUE FALSE What do you think will happen if we execute the code sum(HP&gt;200) and mean(HP&gt;200)? Have a think about this then check out the solution when you’re ready. Solution sum(HP &gt; 200) ## [1] 7 mean(HP &gt; 200) ## [1] 0.21875 In both of these case, the conditional statement(s) have produced a vector of TRUE and FALSE Boolean values. In R, these are understood as being values of 1 and 0 resepectively. Hence, it is then possible to take the sum() or the mean() over the Boolean values themselves. The above gives an examples of how R understands the Boolean values (TRUE/FALSE) as 1 and 0, respectivley and also give you an idea of how powerful such simple lines of conditional code can be when used in the right way. Exercise 2.2 Can you create a vector of all square numbers from 1 to 100 and count how many of these values are divisible by 3? Moreover, can you determine what percentage of them are NOT divisible by 5? In the next few weeks, we will look in more details at how we can use these relational operators (along with the logical operators discussed below) to conditionally extract data/values from a data.frame. This is a very helpful skill to learn for data handling and manipulation. 2.2 Logical Operators ‘Logical operators’ are used to check whether multiple conditions have been satisfied at the same time (AND) or at least one of them (OR). The key to understanding how these work in R, is understanding how logical operators work in theory. Let us begin with the logical operator ‘AND’ which, in R, is denoted via &amp; or &amp;&amp; (I will explain the difference later). For an AND statement/condition to evaluate to TRUE, both conditions in the statement must be TRUE. That is, the condition on the left is TRUE ‘AND’ the condition on the right is TRUE TRUE &amp; TRUE ## [1] TRUE TRUE &amp; FALSE ## [1] FALSE FALSE &amp; FALSE ## [1] FALSE pi ## [1] 3.141593 pi &gt; 3 ## [1] TRUE pi &lt; 4 ## [1] TRUE pi &gt; 3 &amp; pi &lt; 4 ## [1] TRUE 5 &lt; 10 &amp; 5 &lt; 3 ## [1] FALSE It is actually possible to have more than two arguments and include different relational operators as well.What do we think the following expression will evaluate to, TRUE or FALSE? pi &gt; 0 &amp; pi &lt; 5 &amp; !(pi %% 2 == 0) ## [1] TRUE As with relational operators, logical operators can also be used in vector form, where the &amp; operator evaluates on a term by term basis, e.g. c(1,2,3) &lt; c(2,3,4) &amp; c(2,3,4) &lt; c(3,4,5) # Think about this one a little! ## [1] TRUE TRUE TRUE In fact, this sort of logical/relational operation can also be computed on other objects than just numerical values, i.e. ‘character strings’: &quot;Red&quot; == &quot;Red&quot; ## [1] TRUE &quot;Red&quot; == &quot;Blue&quot; ## [1] FALSE &quot;Red&quot; == &quot;red&quot; ## [1] FALSE c(1, 2, 3) &lt; c(2, 3, 4) &amp; &quot;Red&quot; == &quot;Blue&quot; # How has this worked? The left hand side is a 3 element vector but the right is a single logical element? ## [1] FALSE FALSE FALSE c(1, 2, 3) &lt; c(2, 1, 4) &amp; &quot;Red&quot; == &quot;Red&quot; ## [1] TRUE FALSE TRUE In contrast to &amp; which evaluates on a term by term basis, the double &amp;&amp; reads from left to right and only evaluates the first values of each vector c(1, 2, 3) &lt; c(2, 1, 4) &amp;&amp; &quot;Red&quot; == &quot;Red&quot; ## Warning in c(1, 2, 3) &lt; c(2, 1, 4) &amp;&amp; &quot;Red&quot; == &quot;Red&quot;: &#39;length(x) = 3 &gt; 1&#39; in ## coercion to &#39;logical(1)&#39; ## [1] TRUE c(5, 2, 3) &lt; c(2, 1, 4) &amp;&amp; &quot;Red&quot; == &quot;Red&quot; ## Warning in c(5, 2, 3) &lt; c(2, 1, 4) &amp;&amp; &quot;Red&quot; == &quot;Red&quot;: &#39;length(x) = 3 &gt; 1&#39; in ## coercion to &#39;logical(1)&#39; ## [1] FALSE The second logical operator is the so called OR operator, denoted by | and ||, which evaluates to TRUE as long as ‘at least one statement is TRUE’, e.g. TRUE | TRUE ## [1] TRUE TRUE | FALSE ## [1] TRUE FALSE | TRUE ## [1] TRUE FALSE | FALSE ## [1] FALSE F | F | T | F #etc. ## [1] TRUE The same ideas as were discussed above for &amp; work also for |, i.e. | evaluates element-wise, whilst || only evaluates the first element of a vector. Exercise 2.3 With all this in mind, how can we calculate the number of cars in the mtcars data set that have horsepower greater than 200, mpg at most 30, are automatic but do not have 6 cylinders? Exercise 2.4 The set of data VADeaths contains the death rates (measured per 1000 population per year), in Virginia, USA, in 1940. The structure of this data set is a matrix (not a data frame) with the rows denoting age ranges and the columns sex/area. How can we find out this information (and possibly more) about the data set? ii. Extract the two columns containing the female data, either together or separately. Using conditional arguments, determine how many age groups have a death rate larger than 20 for rural females and a death rate less than 30 from Urban females. 2.3 IF Statements ‘IF’ Statements are extremely popular and powerful tools in programming that are used to execute certain commands, based on given conditions. In most cases, the conditions used within IF statements are built up from combinations of the relational and logical operators seen above. In general, an IF statement has the following form: if ( condition ){ command } else { command } To see how an IF statement works in practice, let us look at a simple example to check if a number is odd or even x &lt;- 8 if (x %% 2 == 0){ print(&quot;This number is even&quot;) } else { print(&quot;This number is odd&quot;) } ## [1] &quot;This number is even&quot; You can actually make the output even better in this example by asking it to print out the value of \\(x\\) that has been given by using the paste function paste(). Notice the variable \\(x\\) is not in quotation marks but the ‘words’ are. x &lt;- 14 if (x %% 2 == 0){ print(paste(x, &quot;is an even number&quot;)) } else { print(paste(x,&quot;is an odd number&quot;)) } ## [1] &quot;14 is an even number&quot; This is quite a simple example but it is very possible to have more complicated and longer IF statements that contain more conditional possibilities. If this is the case, you can simply extend the IF statement by adding elseif instead of just else. Finally, once you have finished with all conditions, you finish with else. For example x &lt;- 7 if (x &lt; 0) { print(paste(x, &quot;is a negative number&quot;)) } else if (x &gt; 0) { print(paste(x, &quot;is a positive number&quot;)) } else { print(paste(x, &quot;is Zero&quot;)) } ## [1] &quot;7 is a positive number&quot; Exercise 2.5 Can you create an IF statement which tells you whether a number (x) is divisible by another number (y), where both x and y can be changed (not fixed)? Hint: Use the modulus operator %%. Looking back at the previous two examples regarding even/odd and positive/negative numbers, we can actually combine these two statements by using logical operators within the IF conditions: x &lt;- 4 if (x &lt; 0 &amp; x %% 2== 0) { print(paste(x, &quot;is a negative even number&quot;)) } else if (x &lt; 0) { print(paste(x,&quot;is a negative odd number&quot;)) } else if (x &gt; 0 &amp; x %% 2 == 0) { print(paste(x, &quot;is a positive even number&quot;)) } else if (x &gt; 0){ print(paste(x, &quot;is a positive odd number&quot;)) } else { print(paste(x, &quot;is Zero&quot;)) } ## [1] &quot;4 is a positive even number&quot; In fact, you could do this an alternative way by ‘nesting’ IF statements inside one another to make several ‘layers’. There is no right or wrong way to do these but through experience you will see either can be used depending on the situation. x &lt;- 3 if (x &lt; 0) { if (x %% 2 == 0){ print(paste(x, &quot;is a negative even number&quot;)) } else { print(paste(x,&quot;is a negative odd number&quot;))} } else if (x &gt; 0) { if (x %% 2 == 0){ print(paste(x, &quot;is a positive even number&quot;)) } else { print(paste(x, &quot;is a positive odd number&quot;)) } } else { print(paste(x, &quot;is Zero&quot;)) } ## [1] &quot;3 is a positive odd number&quot; What happens if we let \\(x\\) be a vector? Note - The IF statement will technically work in the sense it will print something out, but it will not do quite what we expect. This is because in an IF statement, the conditions or ‘test statements’ can only be single elements and thus, R will only consider the first element of the vector. With this in mind, it is important to note that if you use a logical operator in an IF statement, it is always best to use the double version, i.e. &amp;&amp; or ||. That being said, it is possible to bypass such a problem using the ifelse() function. The ifelse() function allows us to create an IF statement which only has one condition but can be applied to a vector element-wise. x &lt;- c(1, 2, 3) ifelse(x %% 2 == 0, &quot;Even&quot;, &quot;Odd&quot;) ## [1] &quot;Odd&quot; &quot;Even&quot; &quot;Odd&quot; Note - This only works for quite simple statements. It is possible to use a more complicated IF statement on a vector as we tried above but to do so we have to introduce the idea of FOR loops, which we will discuss next week! 2.4 Exercises Create an R script that calculates the square root of a value, x. If the value contained in x is negative it should return NA as output. Create an R script that returns the maximum value out of the elements of a numeric vector of length 2 (two elements), without using the min, max or sort functions. Use the command x &lt;- rexp(20, rate = 0.5) to create a vector containing 20 simulations of an Exponential random variable with mean 2. Return the number of values that are larger than the mean of the vector x. You are allowed to use the mean() function. "],["additional-tips.html", "A Additional Tips Commenting Help", " A Additional Tips Commenting Imagine writing a 500 line R code which analyses financial and claim severity data for your company. Within this code, you have assigned a variety of variables, produced countless plots and created numerous different data frames containing the necessary information. Now imagine either of the following scenarios: You need to go back through the code to find a particular plot and/or function that computed a certain value of interest that lies somewhere in the middle of your code; You have been re-assigned to a different task and have to send your source code to another colleague to take over. In either case, you will encounter a major problem when it comes to going through lines upon lines of code to find what your looking for, or even remember what you have done. Therefore, to avoid this problem, we insist on the use of commenting when writing R script. To add comments into your script you can simply use the hash tag symbol #. R understands that anything on a line following the hash tag is only a comment and will not be executed when run into the console. For example, look at the following code: Figure A.1: Error when adding text to code line. As you can see from Figure:@ref{fig:comment1}, when we ran the line of code from the script into the console, R throws up an error. This is due to the fact that R is trying to understand the text following the curve() function as a command to be executed but cannot match it to any known functions and/or variables. On the other hand, if we add the commenting symbol #, look what happens: Figure A.2: Comment using hashtag symbol. In this case, R executed the initial command/function curve() but then did not consider anything after the hash tag as it knows it is simply a comment. This is a very helpful feature that we strongly recommend you use at all times and get into the habit of using early. It will save you a lot of time and hard work further down the line. Help The final feature we want to mention in this introductory chapter is the help functionality. Towards the start of this chapter, we discussed the ‘Help’ tab on the bottom right of the screen and briefly explained how it works. In summary, you can click the ‘Help’ tab and search for a particular function, e.g. plot(). Doing so will bring up an information page detailing the plot() function, its possible arguments and some worked examples: Figure A.3: Using the ‘Help’ tab for the plot() function. An alternative way to access this help page is to use the ? symbol within the script/console. For example, if you know the name of the function you want some more information about, e.g. plot(), instead of going into the ‘Help’ tab, you can simply ?plot() in your script then run it into the console or, equivalently, type it directly into the console itself. In either case you will produce the same screen as seen in Figure:A.3 above. Finally, if you do not know the function names itself you can conduct a broader search of a specific word using the double question mark symbol, i.e. ??. For example, assume you wanted to compute the variance but did not already know the associated function was var(). Then, you could type ??variance, which would bring up a list of information pages containing any relevance to variance and you can browse through these as you wish until you find an appropriate function: Figure A.4: Using the double question mark symbol for ‘Help’. Although these ‘Help’ tools will indeed prove very helpful throughout your programming journey, you cannot emphasise enough the power and ease of simply using a search engine to find answers. There are so many different packages, containing different functions, each of which has several arguments with a list of possible value, it is impossible to learn them. Therefore, browsing the internet to search for these functions and how bets to use them is another vital tool at your disposal. "],["cheat-sheets.html", "B Cheat Sheets R Cheat Sheets RMarkdown Cheat Sheets RMarkdown Guides", " B Cheat Sheets R Cheat Sheets RMarkdown Cheat Sheets RMarkdown Guides Learning how to create documents in RMarkdown for the first time can be quite daunting, especially in this module which requires extensive mathematical formulae, plots and code to be included. To help you with this, I have listed a number of very useful online guides that I use myself when creating RMarkdown documents (including these notes). Be aware that some of them contain alot of information so be careful to only read through the relevant sections: R Markdown: The Definitive Guide R Markdown Cookbook Authoring Books with R Markdown "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
